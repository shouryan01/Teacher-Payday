import Router from '../shared/lib/router/router';
import type { NextRouter } from '../shared/lib/router/router';
declare type ClassArguments<T> = T extends new (...args: infer U) => any ? U : any;
declare type RouterArgs = ClassArguments<typeof Router>;
declare type SingletonRouterBase = {
    router: Router | null;
    readyCallbacks: Array<() => any>;
    ready(cb: () => any): void;
};
export { Router };
export type { NextRouter };
export declare type BlitzRouter = NextRouter;
export declare type SingletonRouter = SingletonRouterBase & NextRouter;
declare const routerEvents: readonly ["routeChangeStart", "beforeHistoryChange", "routeChangeComplete", "routeChangeError", "hashChangeStart", "hashChangeComplete"];
export declare type RouterEvent = typeof routerEvents[number];
declare const _default: SingletonRouter;
export default _default;
export { default as withRouter } from './with-router';
/**
 * `useRouter` is a React hook used to access `router` object within components
 *
 * @returns `router` object
 * @see Docs {@link https://blitzjs.com/docs/router#router-object | router}
 */
export declare function useRouter(): NextRouter;
export declare function createRouter(...args: RouterArgs): Router;
export declare function makePublicRouterInstance(router: Router): NextRouter;
export declare function useRouterQuery(): Record<string, string | string[]>;
declare type Dict<T> = Record<string, T | undefined>;
declare type ReturnTypes = 'string' | 'number' | 'array';
export declare function useParams(): Dict<string | string[]>;
export declare function useParams(returnType?: ReturnTypes): Dict<string | string[]>;
export declare function useParams(returnType: 'string'): Dict<string>;
export declare function useParams(returnType: 'number'): Dict<number>;
export declare function useParams(returnType: 'array'): Dict<string[]>;
export declare function useParam(key: string): undefined | string | string[];
export declare function useParam(key: string, returnType: 'string'): string | undefined;
export declare function useParam(key: string, returnType: 'number'): number | undefined;
export declare function useParam(key: string, returnType: 'array'): string[] | undefined;
