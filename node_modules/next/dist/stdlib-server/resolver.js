"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resolver = void 0;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function isResultWithContext(x) {
    return typeof x === 'object' && x !== null && 'ctx' in x && x.__blitz === true;
}
function pipe(...args) {
    const functions = args;
    return (function(input, ctx) {
        var _ref = _asyncToGenerator(function*(input, ctx) {
            let lastResult = input;
            for (let fn of functions){
                lastResult = yield fn(lastResult, ctx);
                if (isResultWithContext(lastResult)) {
                    ctx = lastResult.ctx;
                    lastResult = lastResult.value;
                }
            }
            return lastResult;
        });
        return function() {
            return _ref.apply(this, arguments);
        };
    })();
}
const authorize = (...args)=>{
    return function _innerAuthorize(input, ctx) {
        const session = ctx.session;
        session.$authorize(...args);
        return {
            __blitz: true,
            value: input,
            // we could use {...ctx, session} instead of `as any` just for TypeScript's sake
            ctx: ctx
        };
    };
};
function zod(schema, parserType = 'async') {
    if (parserType === 'sync') {
        return (input)=>schema.parse(input)
        ;
    } else {
        return (input)=>schema.parseAsync(input)
        ;
    }
}
const resolver = {
    pipe,
    zod,
    authorize
};
exports.resolver = resolver;

//# sourceMappingURL=resolver.js.map