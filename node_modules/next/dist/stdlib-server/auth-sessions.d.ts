/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { EmptyPublicData, IsAuthorizedArgs, PublicData, SessionConfig, SessionContext, NextApiRequest, NextApiResponse, Middleware, MiddlewareResponse } from '../shared/lib/utils';
export interface SimpleRolesIsAuthorized<RoleType = string> {
    ({ ctx, args, }: {
        ctx: any;
        args: [roleOrRoles?: RoleType | RoleType[]];
    }): boolean;
}
export declare const simpleRolesIsAuthorized: SimpleRolesIsAuthorized;
export declare const sessionMiddleware: (sessionConfig?: Partial<SessionConfig>) => Middleware;
declare type JwtPayload = AnonymousSessionPayload | null;
declare type AnonSessionKernel = {
    handle: string;
    publicData: EmptyPublicData;
    jwtPayload: JwtPayload;
    antiCSRFToken: string;
    anonymousSessionToken: string;
};
declare type AuthedSessionKernel = {
    handle: string;
    publicData: PublicData;
    jwtPayload: JwtPayload;
    antiCSRFToken: string;
    sessionToken: string;
};
declare type SessionKernel = AnonSessionKernel | AuthedSessionKernel;
export declare function getSession(req: NextApiRequest | IncomingMessage, res: NextApiResponse | ServerResponse): Promise<SessionContext>;
export declare class SessionContextClass implements SessionContext {
    private _req;
    private _res;
    private _kernel;
    constructor(req: NextApiRequest, res: MiddlewareResponse, kernel: SessionKernel);
    get $handle(): string;
    get userId(): unknown;
    get $publicData(): {
        userId: unknown;
    } | EmptyPublicData;
    $authorize(...args: IsAuthorizedArgs): void;
    $isAuthorized(...args: IsAuthorizedArgs): boolean;
    $create(publicData: PublicData, privateData?: Record<any, any>): Promise<void>;
    $revoke(): Promise<void>;
    $revokeAll(): Promise<void>;
    $setPublicData(data: Record<any, any>): Promise<void>;
    $getPrivateData(): Promise<Record<any, any>>;
    $setPrivateData(data: Record<any, any>): Promise<void>;
}
export declare type AnonymousSessionPayload = {
    isAnonymous: true;
    handle: string;
    publicData: EmptyPublicData;
    antiCSRFToken: string;
};
export declare function getAllSessionHandlesForUser(userId: PublicData['userId']): Promise<string[]>;
/**
 * Updates publicData in all sessions
 *
 * @param {PublicData["userId"]} userId
 * @param {Record<any, any>} data
 */
export declare function setPublicDataForUser(userId: PublicData['userId'], data: Record<any, any>): Promise<void>;
export {};
