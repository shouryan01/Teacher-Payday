/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { Middleware, ConnectMiddleware } from '../shared/lib/utils';
import { AsyncFunc, FirstParam, PromiseReturnType } from '../types/utils';
export declare type InvokeWithMiddlewareConfig = {
    req: IncomingMessage;
    res: ServerResponse;
    middleware?: Middleware[];
    [prop: string]: any;
};
export declare function invokeWithMiddleware<T extends AsyncFunc, TInput = FirstParam<T>, TResult = PromiseReturnType<T>>(resolver: T, params: TInput, ctx: InvokeWithMiddlewareConfig): Promise<TResult>;
/**
 * Returns a Blitz middleware function that varies its async logic based on if the
 * given middleware function declares at least 3 parameters, i.e. includes
 * the `next` callback function
 */
export declare function connectMiddleware(middleware: ConnectMiddleware): Middleware;
export declare const secureProxyMiddleware: Middleware;
