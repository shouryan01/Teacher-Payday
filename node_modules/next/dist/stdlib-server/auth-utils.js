"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SecurePassword = exports.generateToken = exports.hash256 = void 0;
var crypto = _interopRequireWildcard(require("crypto"));
var _indexCjs = require("next/dist/compiled/nanoid/index.cjs");
var _index = require("../stdlib/index");
var _securePassword = _interopRequireDefault(require("secure-password"));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                    };
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
const hash256 = (input = '')=>{
    return crypto.createHash('sha256').update(input).digest('hex');
};
exports.hash256 = hash256;
const generateToken = (numberOfCharacters = 32)=>(0, _indexCjs).nanoid(numberOfCharacters)
;
exports.generateToken = generateToken;
const SP = ()=>new _securePassword.default()
;
const SecurePassword = _objectSpread({
}, _securePassword.default, {
    hash (password) {
        return _asyncToGenerator(function*() {
            if (!password) {
                throw new _index.AuthenticationError();
            }
            const hashedBuffer = yield SP().hash(Buffer.from(password));
            return hashedBuffer.toString('base64');
        })();
    },
    verify (hashedPassword, password) {
        return _asyncToGenerator(function*() {
            if (!hashedPassword || !password) {
                throw new _index.AuthenticationError();
            }
            try {
                const result = yield SP().verify(Buffer.from(password), Buffer.from(hashedPassword, 'base64'));
                // Return result for valid results.
                switch(result){
                    case SecurePassword.VALID:
                    case SecurePassword.VALID_NEEDS_REHASH:
                        return result;
                    default:
                        // For everything else throw AuthenticationError
                        throw new _index.AuthenticationError();
                }
            } catch (error) {
                // Could be error like failed to hash password
                throw new _index.AuthenticationError();
            }
        })();
    }
});
exports.SecurePassword = SecurePassword;

//# sourceMappingURL=auth-utils.js.map