"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = blitzRpcServerTransform;
var _core = require("next/dist/compiled/babel/core");
var _helperModuleImports = require("@babel/helper-module-imports");
var _utils = require("../../utils");
/* This plugin changes the file default export to be like this:
 *
 export default require('next/data-client').buildRpcResolver(
   function getUsers(input) {
     return db.users.findMany()
   },
   {
    "resolverName": "getUsers",
    "resolverType": "query",
    "routePath": "/api/rpc/getUsers"
  }
  );
 *
*/ function functionDeclarationToExpression(declaration) {
    return _core.types.functionExpression(declaration.id, declaration.params, declaration.body, declaration.generator, declaration.async);
}
function classDeclarationToExpression(declaration) {
    return _core.types.classExpression(declaration.id, declaration.superClass, declaration.body, declaration.decorators);
}
function addBuildRpcResolverImport(path) {
    return (0, _helperModuleImports).addNamed(path, 'buildRpcResolver', 'next/data-client');
}
function wrapInHOF(path, expr, { routePath , resolverName , resolverType  }) {
    const program = path.findParent(_core.types.isProgram);
    if (!program) throw new Error('Missing parent');
    // eslint-disable-next-line no-shadow
    const hasMiddlewareExport = program.node.body.find((path1)=>{
        if (!_core.types.isExportNamedDeclaration(path1)) return null;
        if (!path1.declaration) return null;
        if (!_core.types.isVariableDeclaration(path1.declaration)) return null;
        // eslint-disable-next-line no-shadow
        const variableDeclarator = path1.declaration.declarations.find((path2)=>_core.types.isVariableDeclarator(path2)
        );
        if (!variableDeclarator) return null;
        return variableDeclarator.id.name === 'middleware';
    });
    const metadataProperties = [
        _core.types.objectProperty(_core.types.stringLiteral('resolverName'), _core.types.stringLiteral(resolverName)),
        _core.types.objectProperty(_core.types.stringLiteral('resolverType'), _core.types.stringLiteral(resolverType)),
        _core.types.objectProperty(_core.types.stringLiteral('routePath'), _core.types.stringLiteral(routePath)), 
    ];
    if (hasMiddlewareExport) {
        metadataProperties.push(_core.types.objectProperty(_core.types.identifier('middleware'), _core.types.identifier('middleware')));
    }
    return _core.types.callExpression(addBuildRpcResolverImport(path), [
        expr,
        _core.types.objectExpression(metadataProperties), 
    ]);
}
function wrapExportDefaultDeclaration(path, metadata) {
    const { node  } = path;
    if (_core.types.isIdentifier(node.declaration) || _core.types.isFunctionExpression(node.declaration) || _core.types.isCallExpression(node.declaration)) {
        node.declaration = wrapInHOF(path, node.declaration, metadata);
    } else if (_core.types.isFunctionDeclaration(node.declaration) || _core.types.isClassDeclaration(node.declaration)) {
        if (node.declaration.id) {
            path.insertBefore(node.declaration);
            node.declaration = wrapInHOF(path, node.declaration.id, metadata);
        } else {
            if (_core.types.isFunctionDeclaration(node.declaration)) {
                node.declaration = wrapInHOF(path, functionDeclarationToExpression(node.declaration), metadata);
            } else {
                node.declaration = wrapInHOF(path, classDeclarationToExpression(node.declaration), metadata);
            }
        }
    }
}
const fileExtensionRegex = /\.([a-z]+)$/;
function blitzRpcServerTransform(_babel) {
    return {
        visitor: {
            ExportDefaultDeclaration (path, state) {
                var ref;
                const { filename , cwd  } = state;
                const fileExt = ((ref = fileExtensionRegex.exec(filename)) === null || ref === void 0 ? void 0 : ref[1]) || 'unknown';
                const relativePathFromRoot = filename.replace(cwd, '');
                const resolverName = (0, _utils).convertPageFilePathToResolverName(relativePathFromRoot);
                const resolverType = (0, _utils).convertPageFilePathToResolverType(relativePathFromRoot);
                const routePath = (0, _utils).convertPageFilePathToRoutePath(relativePathFromRoot, [
                    fileExt, 
                ]);
                wrapExportDefaultDeclaration(path, {
                    resolverName,
                    resolverType,
                    routePath
                });
            }
        }
    };
}

//# sourceMappingURL=blitz-rpc-server-transform.js.map