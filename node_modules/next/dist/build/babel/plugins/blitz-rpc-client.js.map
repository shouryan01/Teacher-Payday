{"version":3,"sources":["../../../../build/babel/plugins/blitz-rpc-client.ts"],"sourcesContent":["import { PluginObj } from 'next/dist/compiled/babel/core'\nimport { BabelType } from 'babel-plugin-tester'\nimport {\n  convertPageFilePathToRoutePath,\n  convertPageFilePathToResolverName,\n  convertPageFilePathToResolverType,\n} from '../../utils'\n\n/* This plugin changes the file contents to this:\n *\nimport { buildRpcClient } from \"next/data-client\";\nexport default buildRpcClient({\n  \"resolverName\": \"getUsers\",\n  \"resolverType\": \"query\",\n  \"routePath\": \"/api/rpc/getUsers\"\n});\n *\n*/\n\n// https://astexplorer.net/#/gist/02bab3c8f0488923346b607ed578e2f7/latest (may be out of date)\n\nconst fileExtensionRegex = /\\.([a-z]+)$/\n\nexport default function blitzRpcClient(babel: BabelType): PluginObj {\n  const { types: t } = babel\n\n  return {\n    visitor: {\n      Program: {\n        enter(path, state) {\n          const { filename, cwd } = state\n          const fileExt = fileExtensionRegex.exec(filename)?.[1] || 'unknown'\n\n          const relativePathFromRoot = filename.replace(cwd, '')\n          const resolverName = convertPageFilePathToResolverName(\n            relativePathFromRoot\n          )\n          const resolverType = convertPageFilePathToResolverType(\n            relativePathFromRoot\n          )\n          const routePath = convertPageFilePathToRoutePath(\n            relativePathFromRoot,\n            [fileExt as string]\n          )\n\n          const importDeclaration = t.importDeclaration(\n            [\n              t.importSpecifier(\n                t.identifier('buildRpcClient'),\n                t.identifier('buildRpcClient')\n              ),\n            ],\n            t.stringLiteral('next/data-client')\n          )\n          const exportDeclaration = t.exportDefaultDeclaration(\n            t.callExpression(t.identifier('buildRpcClient'), [\n              t.objectExpression([\n                t.objectProperty(\n                  t.stringLiteral('resolverName'),\n                  t.stringLiteral(resolverName)\n                ),\n                t.objectProperty(\n                  t.stringLiteral('resolverType'),\n                  t.stringLiteral(resolverType)\n                ),\n                t.objectProperty(\n                  t.stringLiteral('routePath'),\n                  t.stringLiteral(routePath)\n                ),\n              ]),\n            ])\n          )\n          path.node.body = [importDeclaration, exportDeclaration]\n        },\n      },\n    },\n  }\n}\n"],"names":[],"mappings":";;;;kBAuBwB,cAAc;AAjB/B,GAAa,CAAb,MAAa;AAEpB,EASE,AATF;;;;;;;;;AASE,AATF,EASE,CAEF,EAA8F,AAA9F,4FAA8F;AAE9F,KAAK,CAAC,kBAAkB;SAEA,cAAc,CAAC,KAAgB,EAAa,CAAC;IACnE,KAAK,GAAG,KAAK,EAAE,CAAC,MAAK,KAAK;;QAGxB,OAAO;YACL,OAAO;gBACL,KAAK,EAAC,IAAI,EAAE,KAAK,EAAE,CAAC;wBAEF,GAAiC;oBADjD,KAAK,GAAG,QAAQ,GAAE,GAAG,MAAK,KAAK;oBAC/B,KAAK,CAAC,OAAO,KAAG,GAAiC,GAAjC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,eAAhC,GAAiC,UAAjC,CAAsC,QAAtC,CAAsC,GAAtC,GAAiC,CAAG,CAAC,OAAK,OAAS;oBAEnE,KAAK,CAAC,oBAAoB,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG;oBACjD,KAAK,CAAC,YAAY,OA5BrB,MAAa,oCA6BR,oBAAoB;oBAEtB,KAAK,CAAC,YAAY,OA/BrB,MAAa,oCAgCR,oBAAoB;oBAEtB,KAAK,CAAC,SAAS,OAlClB,MAAa,iCAmCR,oBAAoB;wBACnB,OAAO;;oBAGV,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC,iBAAiB;wBAEzC,CAAC,CAAC,eAAe,CACf,CAAC,CAAC,UAAU,EAAC,cAAgB,IAC7B,CAAC,CAAC,UAAU,EAAC,cAAgB;uBAGjC,CAAC,CAAC,aAAa,EAAC,gBAAkB;oBAEpC,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC,wBAAwB,CAClD,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,EAAC,cAAgB;wBAC5C,CAAC,CAAC,gBAAgB;4BAChB,CAAC,CAAC,cAAc,CACd,CAAC,CAAC,aAAa,EAAC,YAAc,IAC9B,CAAC,CAAC,aAAa,CAAC,YAAY;4BAE9B,CAAC,CAAC,cAAc,CACd,CAAC,CAAC,aAAa,EAAC,YAAc,IAC9B,CAAC,CAAC,aAAa,CAAC,YAAY;4BAE9B,CAAC,CAAC,cAAc,CACd,CAAC,CAAC,aAAa,EAAC,SAAW,IAC3B,CAAC,CAAC,aAAa,CAAC,SAAS;;;oBAKjC,IAAI,CAAC,IAAI,CAAC,IAAI;wBAAI,iBAAiB;wBAAE,iBAAiB;;gBACxD,CAAC;;;;AAIT,CAAC"}