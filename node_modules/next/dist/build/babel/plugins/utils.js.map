{"version":3,"sources":["../../../../build/babel/plugins/utils.ts"],"sourcesContent":["import { NodePath, PluginPass, types as t } from 'next/dist/compiled/babel/core'\nimport { addNamed as addNamedImport } from '@babel/helper-module-imports'\n\nexport function functionDeclarationToExpression(\n  declaration: t.FunctionDeclaration\n) {\n  return t.functionExpression(\n    declaration.id,\n    declaration.params,\n    declaration.body,\n    declaration.generator,\n    declaration.async\n  )\n}\n\nexport function classDeclarationToExpression(declaration: t.ClassDeclaration) {\n  return t.classExpression(\n    declaration.id,\n    declaration.superClass,\n    declaration.body,\n    declaration.decorators\n  )\n}\n\nexport function getFileName(state: PluginPass) {\n  const { filename, cwd } = state\n\n  if (!filename) {\n    return undefined\n  }\n\n  if (cwd && filename.startsWith(cwd)) {\n    return filename.slice(cwd.length)\n  }\n\n  return filename\n}\n\nexport function wrapExportDefaultDeclaration(\n  path: NodePath<any>,\n  HOFName: string,\n  importFrom: string\n) {\n  // eslint-disable-next-line no-shadow\n  function wrapInHOF(path: NodePath<any>, expr: t.Expression) {\n    return t.callExpression(addNamedImport(path, HOFName, importFrom), [expr])\n  }\n\n  const { node } = path\n\n  if (\n    t.isIdentifier(node.declaration) ||\n    t.isFunctionExpression(node.declaration) ||\n    t.isCallExpression(node.declaration)\n  ) {\n    node.declaration = wrapInHOF(path, node.declaration)\n  } else if (\n    t.isFunctionDeclaration(node.declaration) ||\n    t.isClassDeclaration(node.declaration)\n  ) {\n    if (node.declaration.id) {\n      path.insertBefore(node.declaration)\n      node.declaration = wrapInHOF(path, node.declaration.id)\n    } else {\n      if (t.isFunctionDeclaration(node.declaration)) {\n        node.declaration = wrapInHOF(\n          path,\n          functionDeclarationToExpression(node.declaration)\n        )\n      } else {\n        node.declaration = wrapInHOF(\n          path,\n          classDeclarationToExpression(node.declaration)\n        )\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;;QAGgB,+BAA+B,GAA/B,+BAA+B;QAY/B,4BAA4B,GAA5B,4BAA4B;QAS5B,WAAW,GAAX,WAAW;QAcX,4BAA4B,GAA5B,4BAA4B;AAtCK,GAA+B,CAA/B,KAA+B;AACrC,GAA8B,CAA9B,oBAA8B;SAEzD,+BAA+B,CAC7C,WAAkC,EAClC,CAAC;WAL8C,KAA+B,OAMrE,kBAAkB,CACzB,WAAW,CAAC,EAAE,EACd,WAAW,CAAC,MAAM,EAClB,WAAW,CAAC,IAAI,EAChB,WAAW,CAAC,SAAS,EACrB,WAAW,CAAC,KAAK;AAErB,CAAC;SAEe,4BAA4B,CAAC,WAA+B,EAAE,CAAC;WAf9B,KAA+B,OAgBrE,eAAe,CACtB,WAAW,CAAC,EAAE,EACd,WAAW,CAAC,UAAU,EACtB,WAAW,CAAC,IAAI,EAChB,WAAW,CAAC,UAAU;AAE1B,CAAC;SAEe,WAAW,CAAC,KAAiB,EAAE,CAAC;IAC9C,KAAK,GAAG,QAAQ,GAAE,GAAG,MAAK,KAAK;IAE/B,EAAE,GAAG,QAAQ,EAAE,CAAC;eACP,SAAS;IAClB,CAAC;IAED,EAAE,EAAE,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;eAC7B,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM;IAClC,CAAC;WAEM,QAAQ;AACjB,CAAC;SAEe,4BAA4B,CAC1C,IAAmB,EACnB,OAAe,EACf,UAAkB,EAClB,CAAC;IACD,EAAqC,AAArC,mCAAqC;aAC5B,SAAS,CAAC,KAAmB,EAAE,IAAkB,EAAE,CAAC;eA5Cd,KAA+B,OA6CnE,cAAc,KA5CgB,oBAA8B,WA4C9B,KAAI,EAAE,OAAO,EAAE,UAAU;YAAI,IAAI;;IAC1E,CAAC;IAED,KAAK,GAAG,IAAI,MAAK,IAAI;IAErB,EAAE,EAlD6C,KAA+B,OAmD1E,YAAY,CAAC,IAAI,CAAC,WAAW,KAnDc,KAA+B,OAoD1E,oBAAoB,CAAC,IAAI,CAAC,WAAW,KApDM,KAA+B,OAqD1E,gBAAgB,CAAC,IAAI,CAAC,WAAW,GACnC,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW;IACrD,CAAC,MAAM,EAAE,EAxDsC,KAA+B,OAyD1E,qBAAqB,CAAC,IAAI,CAAC,WAAW,KAzDK,KAA+B,OA0D1E,kBAAkB,CAAC,IAAI,CAAC,WAAW,GACrC,CAAC;QACD,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC;YACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW;YAClC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;QACxD,CAAC,MAAM,CAAC;YACN,EAAE,EAhEyC,KAA+B,OAgEpE,qBAAqB,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC;gBAC9C,IAAI,CAAC,WAAW,GAAG,SAAS,CAC1B,IAAI,EACJ,+BAA+B,CAAC,IAAI,CAAC,WAAW;YAEpD,CAAC,MAAM,CAAC;gBACN,IAAI,CAAC,WAAW,GAAG,SAAS,CAC1B,IAAI,EACJ,4BAA4B,CAAC,IAAI,CAAC,WAAW;YAEjD,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC"}