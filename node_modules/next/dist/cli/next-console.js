"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getBlitzModulePaths = getBlitzModulePaths;
exports.runRepl = exports.loadBlitz = exports.forceRequire = void 0;
var _chokidar = require("chokidar");
var _fs = _interopRequireDefault(require("fs"));
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var REPL = _interopRequireWildcard(require("repl"));
var _globby = _interopRequireDefault(require("globby"));
var _progress = _interopRequireDefault(require("progress"));
var _utils = require("../server/lib/utils");
var _logging = require("../server/lib/logging");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                    };
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const debug = require('debug')('blitz:repl');
const projectRoot = (0, _utils).getProjectRootSync();
const isTypeScript = _fs.default.existsSync(_path.default.join(projectRoot, 'tsconfig.json'));
const invalidateCache = (module)=>{
    delete require.cache[require.resolve(module)];
};
const forceRequire = (modulePath)=>{
    invalidateCache(modulePath);
    if (isTypeScript) {
        return require(modulePath);
    } else {
        const esmRequire = require('esm')(module);
        return esmRequire(modulePath);
    }
};
exports.forceRequire = forceRequire;
async function getBlitzModulePaths() {
    // eslint-disable-next-line no-shadow
    const projectRoot1 = require('next/dist/server/lib/utils').getProjectRootSync();
    const paths = await (0, _globby).default([
        'app/**/{queries,mutations}/**/*.{js,ts,tsx}',
        'utils/*.{js,ts,tsx}',
        'jobs/**/*.{js,ts,tsx}',
        'integrations/**/*.{js,ts,tsx}',
        '!**/*.test.*',
        '!**/*.spec.*', 
    ], {
        cwd: projectRoot1,
        gitignore: true
    });
    paths.push('db');
    debug('Paths', paths);
    return [
        ...paths.map((p)=>_path.default.join(projectRoot1, p)
        )
    ];
}
const loadBlitz = async ()=>{
    const paths = await getBlitzModulePaths();
    const percentage = new _progress.default('Loading Modules :current/:total', {
        total: paths.length
    });
    const modules = Object.assign({
    }, ...paths.map((modulePath)=>{
        let name = _path.default.parse(modulePath).name;
        if (name === 'index') {
            const dirs = _path.default.dirname(modulePath).split(_path.default.sep);
            name = dirs[dirs.length - 1];
        }
        try {
            debug('Loading', modulePath);
            const module = forceRequire(modulePath);
            const contextObj = module.default || module;
            // debug("ContextObj", contextObj)
            percentage.tick();
            //TODO: include all exports here, not just default
            return {
                [name]: contextObj
            };
        } catch (error) {
            (0, _logging).baseLogger().error(`Failed to load ${modulePath}: ${error}`);
            debug('Failed to load module', error);
            return {
            };
        }
    }));
    percentage.terminate();
    return modules;
};
exports.loadBlitz = loadBlitz;
const loadBlitzModules = (repl, modules)=>{
    Object.assign(repl.context, modules);
};
const loadModules = async (repl)=>{
    loadBlitzModules(repl, await loadBlitz());
};
const commands = {
    reload: {
        help: 'Reload all modules',
        async action () {
            this.clearBufferedCommand();
            console.log('Reloading all modules...');
            await loadModules(this);
            this.displayPrompt();
        }
    }
};
const defineCommands = (repl, // eslint-disable-next-line no-shadow
commands1)=>{
    Object.entries(commands1).forEach(([keyword, cmd])=>repl.defineCommand(keyword, cmd)
    );
};
// eslint-disable-next-line no-shadow
const setupSelfRolledHistory = (repl, path)=>{
    function init() {
        try {
            const history = _fs.default.readFileSync(path, {
                encoding: 'utf8'
            });
            const nonEmptyLines = history.split(_os.default.EOL).filter((line)=>line.trim()
            );
            repl.history.push(...nonEmptyLines.reverse());
        } catch (err) {
            if (err.code !== 'ENOENT') {
                throw err;
            }
        }
    }
    function onExit() {
        const addedHistory = repl.lines.join(_os.default.EOL);
        _fs.default.appendFileSync(path, addedHistory);
    }
    init();
    repl.on('exit', onExit);
};
const setupHistory = (repl)=>{
    const blitzConsoleHistoryPath = _path.default.join(projectRoot, '.blitz-console-history');
    if (repl.setupHistory) {
        repl.setupHistory(blitzConsoleHistoryPath, ()=>{
        });
    } else {
        setupSelfRolledHistory(repl, blitzConsoleHistoryPath);
    }
};
const initializeRepl = async (replOptions)=>{
    debug('initializeRepl');
    const modules = await loadBlitz();
    debug('Starting REPL...');
    const repl = REPL.start(replOptions);
    loadBlitzModules(repl, modules);
    defineCommands(repl, commands);
    setupHistory(repl);
    return repl;
};
const setupFileWatchers = async (repl)=>{
    debug('Setting up file watchers...');
    const watchers = [
        (0, _chokidar).watch(await getBlitzModulePaths(), {
            ignoreInitial: true
        }).on('all', ()=>loadModules(repl)
        ), 
    ];
    repl.on('reset', async ()=>{
        debug('Reset, so reloading modules...');
        await loadModules(repl);
    });
    repl.on('exit', ()=>watchers.forEach((watcher)=>watcher.close()
        )
    );
};
const runRepl = async (replOptions)=>{
    const repl = await initializeRepl(replOptions);
    repl.on('exit', ()=>process.exit()
    );
    await setupFileWatchers(repl);
};
exports.runRepl = runRepl;

//# sourceMappingURL=next-console.js.map