"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.enhancePrisma = void 0;
var _crossSpawn = require("cross-spawn");
var _npmWhich = _interopRequireDefault(require("npm-which"));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const enhancePrisma = (client)=>{
    return new Proxy(client, {
        construct (target, args) {
            if (typeof window !== 'undefined' && process.env.JEST_WORKER_ID === undefined) {
                // Return object with $use method if in the browser
                // Skip in Jest tests because window is defined in Jest tests
                return {
                    $use: ()=>{
                    }
                };
            }
            if (!global._blitz_prismaClient) {
                // eslint-disable-next-line no-shadow
                const client1 = new target(...args);
                client1.$reset = (function() {
                    var _reset = _asyncToGenerator(function*() {
                        if (process.env.NODE_ENV === 'production') {
                            throw new Error("You are calling db.$reset() in a production environment. We think you probably didn't mean to do that, so we are throwing this error instead of destroying your life's work.");
                        }
                        const prismaBin = (0, _npmWhich).default(process.cwd()).sync('prisma');
                        yield new Promise((res, rej)=>{
                            const process = (0, _crossSpawn).spawn(prismaBin, [
                                'migrate',
                                'reset',
                                '--force',
                                '--skip-generate'
                            ], {
                                stdio: 'ignore'
                            });
                            process.on('exit', (code)=>code === 0 ? res(0) : rej(code)
                            );
                        });
                        global._blitz_prismaClient.$disconnect();
                    });
                    function reset() {
                        return _reset.apply(this, arguments);
                    }
                    return reset;
                })();
                global._blitz_prismaClient = client1;
            }
            return global._blitz_prismaClient;
        }
    });
};
exports.enhancePrisma = enhancePrisma;

//# sourceMappingURL=prisma-utils.js.map