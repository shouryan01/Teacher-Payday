"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getAuthValues = getAuthValues;
exports.withBlitzInnerWrapper = withBlitzInnerWrapper;
exports.BlitzWrapper = BlitzWrapper;
exports.BlitzProvider = exports.NoPageFlicker = void 0;
var _auth = require("../data-client/auth");
var _utils = require("../shared/lib/utils");
var _head = require("../shared/lib/head");
var _errors = require("./errors");
var _react = _interopRequireDefault(require("react"));
var _hydration = require("react-query/hydration");
var _reactQuery = require("react-query");
var _reactQueryUtils = require("../data-client/react-query-utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const debug = require('debug')('blitz:approot');
const BlitzProvider = ({ client , contextSharing =false , dehydratedState , hydrateOptions , children ,  })=>{
    return(/*#__PURE__*/ _react.default.createElement(_reactQuery.QueryClientProvider, {
        client: client !== null && client !== void 0 ? client : _reactQueryUtils.queryClient,
        contextSharing: contextSharing
    }, /*#__PURE__*/ _react.default.createElement(_hydration.Hydrate, {
        state: dehydratedState,
        options: hydrateOptions
    }, children)));
};
exports.BlitzProvider = BlitzProvider;
const customCSS = `
  body::before {
    content: "";
    display: block;
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 99999;
    background-color: white;
  }

  .blitz-first-render-complete body::before {
    display: none;
  }
`;
const noscriptCSS = `
  body::before {
    content: none
  }
`;
const NoPageFlicker = ()=>{
    return(/*#__PURE__*/ _react.default.createElement(_head.Head, null, /*#__PURE__*/ _react.default.createElement("style", {
        dangerouslySetInnerHTML: {
            __html: customCSS
        }
    }), /*#__PURE__*/ _react.default.createElement("noscript", null, /*#__PURE__*/ _react.default.createElement("style", {
        dangerouslySetInnerHTML: {
            __html: noscriptCSS
        }
    }))));
};
exports.NoPageFlicker = NoPageFlicker;
function getAuthValues(Page, props) {
    if (!Page) return {
    };
    let authenticate = Page.authenticate;
    let redirectAuthenticatedTo = Page.redirectAuthenticatedTo;
    if (authenticate === undefined && redirectAuthenticatedTo === undefined) {
        var ref;
        const layout = (ref = Page.getLayout) === null || ref === void 0 ? void 0 : ref.call(Page, /*#__PURE__*/ _react.default.createElement(Page, Object.assign({
        }, props)));
        if (layout) {
            let currentElement = layout;
            while(true){
                var ref1;
                const type = layout.type;
                if (type.authenticate !== undefined || type.redirectAuthenticatedTo !== undefined) {
                    authenticate = type.authenticate;
                    redirectAuthenticatedTo = type.redirectAuthenticatedTo;
                    break;
                }
                if ((ref1 = currentElement.props) === null || ref1 === void 0 ? void 0 : ref1.children) {
                    var ref2;
                    currentElement = (ref2 = currentElement.props) === null || ref2 === void 0 ? void 0 : ref2.children;
                } else {
                    break;
                }
            }
        }
    }
    return {
        authenticate,
        redirectAuthenticatedTo
    };
}
function withBlitzInnerWrapper(Page) {
    const BlitzInnerRoot = (props)=>{
        // We call useSession so this will rerender anytime session changes
        (0, _auth).useSession({
            suspense: false
        });
        let { authenticate , redirectAuthenticatedTo  } = getAuthValues(Page, props);
        (0, _auth).useAuthorizeIf(authenticate === true);
        if (typeof window !== 'undefined') {
            const publicData = (0, _auth).getPublicDataStore().getData();
            // We read directly from publicData.userId instead of useSession
            // so we can access userId on first render. useSession is always empty on first render
            if (publicData.userId) {
                debug('[BlitzInnerRoot] logged in');
                if (typeof redirectAuthenticatedTo === 'function') {
                    redirectAuthenticatedTo = redirectAuthenticatedTo({
                        session: publicData
                    });
                }
                if (redirectAuthenticatedTo) {
                    const redirectUrl = typeof redirectAuthenticatedTo === 'string' ? redirectAuthenticatedTo : (0, _utils).formatWithValidation(redirectAuthenticatedTo);
                    debug('[BlitzInnerRoot] redirecting to', redirectUrl);
                    const error = new _errors.RedirectError(redirectUrl);
                    error.stack = null;
                    throw error;
                }
            } else {
                debug('[BlitzInnerRoot] logged out');
                if (authenticate && typeof authenticate === 'object' && authenticate.redirectTo) {
                    let { redirectTo  } = authenticate;
                    if (typeof redirectTo !== 'string') {
                        redirectTo = (0, _utils).formatWithValidation(redirectTo);
                    }
                    const url = new URL(redirectTo, window.location.href);
                    url.searchParams.append('next', window.location.pathname);
                    debug('[BlitzInnerRoot] redirecting to', url.toString());
                    const error = new _errors.RedirectError(url.toString());
                    error.stack = null;
                    throw error;
                }
            }
        }
        return(/*#__PURE__*/ _react.default.createElement(Page, Object.assign({
        }, props)));
    };
    for (let [key, value] of Object.entries(Page)){
        BlitzInnerRoot[key] = value;
    }
    if (process.env.NODE_ENV !== 'production') {
        BlitzInnerRoot.displayName = `BlitzInnerRoot`;
    }
    return BlitzInnerRoot;
}
function BlitzWrapper({ children , appProps  }) {
    var ref3;
    const { authenticate , redirectAuthenticatedTo  } = getAuthValues(appProps.Component, appProps.pageProps);
    const noPageFlicker = appProps.Component.suppressFirstRenderFlicker || authenticate !== undefined || redirectAuthenticatedTo;
    _react.default.useEffect(()=>{
        setTimeout(()=>{
            document.documentElement.classList.add('blitz-first-render-complete');
        });
    }, []);
    return(/*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(BlitzProvider, {
        dehydratedState: (ref3 = appProps.pageProps) === null || ref3 === void 0 ? void 0 : ref3.dehydratedState
    }, noPageFlicker && /*#__PURE__*/ _react.default.createElement(NoPageFlicker, null), children)));
}

//# sourceMappingURL=blitz-app-root.js.map