"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.formatZodError = formatZodError;
exports.recursiveFormatZodErrors = recursiveFormatZodErrors;
exports.validateZodSchema = validateZodSchema;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function formatZodError(error) {
    if (!error || typeof error.format !== 'function') {
        throw new Error('The argument to formatZodError must be a zod error with error.format()');
    }
    const errors = error.format();
    return recursiveFormatZodErrors(errors);
}
function recursiveFormatZodErrors(errors) {
    let formattedErrors = {
    };
    for(const key in errors){
        var ref, ref1;
        if (key === '_errors') {
            continue;
        }
        if ((ref = errors[key]) === null || ref === void 0 ? void 0 : (ref1 = ref._errors) === null || ref1 === void 0 ? void 0 : ref1[0]) {
            if (!isNaN(key) && !Array.isArray(formattedErrors)) {
                formattedErrors = [];
            }
            formattedErrors[key] = errors[key]._errors[0];
        } else {
            if (!isNaN(key) && !Array.isArray(formattedErrors)) {
                formattedErrors = [];
            }
            formattedErrors[key] = recursiveFormatZodErrors(errors[key]);
        }
    }
    return formattedErrors;
}
const validateZodSchemaSync = (schema)=>(values)=>{
        if (!schema) return {
        };
        try {
            schema.parse(values);
            return {
            };
        } catch (error) {
            return error.format ? formatZodError(error) : error.toString();
        }
    }
;
const validateZodSchemaAsync = (schema)=>_asyncToGenerator(function*(values) {
        if (!schema) return {
        };
        try {
            yield schema.parseAsync(values);
            return {
            };
        } catch (error) {
            return error.format ? formatZodError(error) : error.toString();
        }
    })
;
function validateZodSchema(schema, parserType = 'async') {
    if (parserType === 'sync') {
        return validateZodSchemaSync(schema);
    } else {
        return validateZodSchemaAsync(schema);
    }
}

//# sourceMappingURL=zod-utils.js.map