{"version":3,"sources":["../../stdlib/prisma-utils.ts"],"sourcesContent":["import { spawn } from 'cross-spawn'\nimport which from 'npm-which'\n\ninterface Constructor<T = unknown> {\n  new (...args: never[]): T\n}\n\ninterface EnhancedPrismaClientAddedMethods {\n  $reset: () => Promise<void>\n}\n\ninterface EnhancedPrismaClientConstructor<\n  TPrismaClientCtor extends Constructor\n> {\n  new (\n    ...args: ConstructorParameters<TPrismaClientCtor>\n  ): InstanceType<TPrismaClientCtor> & EnhancedPrismaClientAddedMethods\n}\n\nexport const enhancePrisma = <TPrismaClientCtor extends Constructor>(\n  client: TPrismaClientCtor\n): EnhancedPrismaClientConstructor<TPrismaClientCtor> => {\n  return new Proxy(\n    client as EnhancedPrismaClientConstructor<TPrismaClientCtor>,\n    {\n      construct(target, args) {\n        if (\n          typeof window !== 'undefined' &&\n          process.env.JEST_WORKER_ID === undefined\n        ) {\n          // Return object with $use method if in the browser\n          // Skip in Jest tests because window is defined in Jest tests\n          return { $use: () => {} }\n        }\n\n        if (!global._blitz_prismaClient) {\n          // eslint-disable-next-line no-shadow\n          const client = new target(...(args as any))\n\n          client.$reset = async function reset() {\n            if (process.env.NODE_ENV === 'production') {\n              throw new Error(\n                \"You are calling db.$reset() in a production environment. We think you probably didn't mean to do that, so we are throwing this error instead of destroying your life's work.\"\n              )\n            }\n            const prismaBin = which(process.cwd()).sync('prisma')\n            await new Promise((res, rej) => {\n              const process = spawn(\n                prismaBin,\n                ['migrate', 'reset', '--force', '--skip-generate'],\n                {\n                  stdio: 'ignore',\n                }\n              )\n              process.on('exit', (code) => (code === 0 ? res(0) : rej(code)))\n            })\n            global._blitz_prismaClient.$disconnect()\n          }\n\n          global._blitz_prismaClient = client\n        }\n\n        return global._blitz_prismaClient\n      },\n    }\n  )\n}\n"],"names":[],"mappings":";;;;;AAAsB,GAAa,CAAb,WAAa;AACjB,GAAW,CAAX,SAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBtB,KAAK,CAAC,aAAa,IACxB,MAAyB,GAC8B,CAAC;WACjD,GAAG,CAAC,KAAK,CACd,MAAM;QAEJ,SAAS,EAAC,MAAM,EAAE,IAAI,EAAE,CAAC;YACvB,EAAE,SACO,MAAM,MAAK,SAAW,KAC7B,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,SAAS,EACxC,CAAC;gBACD,EAAmD,AAAnD,iDAAmD;gBACnD,EAA6D,AAA7D,2DAA6D;;oBACpD,IAAI,MAAQ,CAAC;oBAAA,CAAC;;YACzB,CAAC;YAED,EAAE,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;gBAChC,EAAqC,AAArC,mCAAqC;gBACrC,KAAK,CAAC,OAAM,GAAG,GAAG,CAAC,MAAM,IAAK,IAAI;gBAElC,OAAM,CAAC,MAAM;wBAAkB,MAAK,iCAAG,CAAC;wBACtC,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,MAAK,UAAY,GAAE,CAAC;4BAC1C,KAAK,CAAC,GAAG,CAAC,KAAK,EACb,4KAA8K;wBAElL,CAAC;wBACD,KAAK,CAAC,SAAS,OA5CT,SAAW,UA4CO,OAAO,CAAC,GAAG,IAAI,IAAI,EAAC,MAAQ;8BAC9C,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,GAAK,CAAC;4BAC/B,KAAK,CAAC,OAAO,OA/CL,WAAa,QAgDnB,SAAS;iCACR,OAAS;iCAAE,KAAO;iCAAE,OAAS;iCAAE,eAAiB;;gCAE/C,KAAK,GAAE,MAAQ;;4BAGnB,OAAO,CAAC,EAAE,EAAC,IAAM,IAAG,IAAI,GAAM,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI;;wBAC9D,CAAC;wBACD,MAAM,CAAC,mBAAmB,CAAC,WAAW;oBACxC,CAAC;6BAlB8B,KAAK;+BAAL,MAAK;;2BAAL,KAAK;;gBAoBpC,MAAM,CAAC,mBAAmB,GAAG,OAAM;YACrC,CAAC;mBAEM,MAAM,CAAC,mBAAmB;QACnC,CAAC;;AAGP,CAAC;QA/CY,aAAa,GAAb,aAAa"}