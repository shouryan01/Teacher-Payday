"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _superjson = _interopRequireDefault(require("superjson"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const errorProps = [
    'name',
    'message',
    'code',
    'statusCode',
    'meta',
    'url'
];
if (process.env.JEST_WORKER_ID === undefined) {
    _superjson.default.allowErrorProps(...errorProps);
}
class AuthenticationError extends Error {
    get _clearStack() {
        return true;
    }
    constructor(message = 'You must be logged in to access this'){
        super(message);
        this.name = 'AuthenticationError';
        this.statusCode = 401;
    }
}
exports.AuthenticationError = AuthenticationError;
if (process.env.JEST_WORKER_ID === undefined) {
    _superjson.default.registerClass(AuthenticationError, {
        identifier: 'BlitzAuthenticationError',
        allowProps: errorProps
    });
}
class CSRFTokenMismatchError extends Error {
    get _clearStack() {
        return true;
    }
    constructor(...args){
        super(...args);
        this.name = 'CSRFTokenMismatchError';
        this.statusCode = 401;
    }
}
exports.CSRFTokenMismatchError = CSRFTokenMismatchError;
if (process.env.JEST_WORKER_ID === undefined) {
    _superjson.default.registerClass(CSRFTokenMismatchError, {
        identifier: 'BlitzCSRFTokenMismatchError',
        allowProps: errorProps
    });
}
class AuthorizationError extends Error {
    get _clearStack() {
        return true;
    }
    constructor(message1 = 'You are not authorized to access this'){
        super(message1);
        this.name = 'AuthorizationError';
        this.statusCode = 403;
    }
}
exports.AuthorizationError = AuthorizationError;
if (process.env.JEST_WORKER_ID === undefined) {
    _superjson.default.registerClass(AuthorizationError, {
        identifier: 'BlitzAuthorizationError',
        allowProps: errorProps
    });
}
class NotFoundError extends Error {
    get _clearStack() {
        return true;
    }
    constructor(message2 = 'This could not be found'){
        super(message2);
        this.name = 'NotFoundError';
        this.statusCode = 404;
    }
}
exports.NotFoundError = NotFoundError;
if (process.env.JEST_WORKER_ID === undefined) {
    _superjson.default.registerClass(NotFoundError, {
        identifier: 'BlitzNotFoundError',
        allowProps: errorProps
    });
}
class PaginationArgumentError extends Error {
    constructor(message3 = 'The pagination arguments are invalid'){
        super(message3);
        this.name = 'PaginationArgumentError';
        this.statusCode = 422;
    }
}
exports.PaginationArgumentError = PaginationArgumentError;
if (process.env.JEST_WORKER_ID === undefined) {
    _superjson.default.registerClass(PaginationArgumentError, {
        identifier: 'BlitzPaginationArgumentError',
        allowProps: errorProps
    });
}
class RedirectError extends Error {
    get _clearStack() {
        return true;
    }
    constructor(url){
        super(typeof url === 'object' ? url.href : url);
        this.name = 'RedirectError';
        this.statusCode = 302;
        this.url = url;
    }
}
exports.RedirectError = RedirectError;
if (process.env.JEST_WORKER_ID === undefined) {
    _superjson.default.registerClass(RedirectError, {
        identifier: 'BlitzRedirectError',
        allowProps: errorProps
    });
}

//# sourceMappingURL=errors.js.map