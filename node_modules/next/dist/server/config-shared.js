"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadConfigAtRuntime = loadConfigAtRuntime;
exports.loadConfigProduction = loadConfigProduction;
exports.assignDefaultsBase = assignDefaultsBase;
exports.normalizeConfig = normalizeConfig;
exports.getConfigSrcPath = getConfigSrcPath;
exports.getCompiledConfigPath = getCompiledConfigPath;
exports.compileConfig = compileConfig;
exports.defaultConfig = void 0;
var _os = _interopRequireDefault(require("os"));
var _imageConfig = require("./image-config");
var _fs = require("fs");
var _esbuild = require("esbuild");
var _findUp = _interopRequireDefault(require("next/dist/compiled/find-up"));
var _path = require("path");
var _constants = require("../shared/lib/constants");
var _fsExtra = require("fs-extra");
var _utils = require("./utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const debug = require('debug')('blitz:config');
function loadConfigAtRuntime() {
    if (!process.env.BLITZ_APP_DIR) {
        throw new Error('Internal Blitz Error: process.env.BLITZ_APP_DIR is not set');
    }
    return loadConfigProduction(process.env.BLITZ_APP_DIR);
}
function loadConfigProduction(pagesDir) {
    let userConfigModule;
    try {
        const path = (0, _path).join(pagesDir, _constants.CONFIG_FILE);
        debug('Loading config from ', path);
        // eslint-disable-next-line no-eval -- block webpack from following this module path
        userConfigModule = eval('require')(path);
    } catch  {
        debug('Did not find custom config file');
        // In case user does not have custom config
        userConfigModule = {
        };
    }
    let userConfig = normalizeConfig(_constants.PHASE_PRODUCTION_SERVER, userConfigModule.default || userConfigModule);
    return assignDefaultsBase(userConfig);
}
const defaultConfig = {
    env: {
    },
    webpack: null,
    webpackDevMiddleware: null,
    distDir: '.next',
    cleanDistDir: true,
    assetPrefix: '',
    configOrigin: 'default',
    useFileSystemPublicRoutes: true,
    generateBuildId: ()=>null
    ,
    generateEtags: true,
    pageExtensions: [
        'tsx',
        'ts',
        'jsx',
        'js'
    ],
    target: 'server',
    poweredByHeader: true,
    compress: true,
    analyticsId: process.env.VERCEL_ANALYTICS_ID || '',
    images: _imageConfig.imageConfigDefault,
    devIndicators: {
        buildActivity: true
    },
    onDemandEntries: {
        maxInactiveAge: 60 * 1000,
        pagesBufferLength: 2
    },
    amp: {
        canonicalBase: ''
    },
    basePath: '',
    sassOptions: {
    },
    trailingSlash: false,
    i18n: null,
    productionBrowserSourceMaps: false,
    optimizeFonts: true,
    log: {
        level: 'info'
    },
    webpack5: Number(process.env.NEXT_PRIVATE_TEST_WEBPACK4_MODE) > 0 ? false : undefined,
    excludeDefaultMomentLocales: true,
    serverRuntimeConfig: {
    },
    publicRuntimeConfig: {
    },
    reactStrictMode: false,
    httpAgentOptions: {
        keepAlive: true
    },
    experimental: {
        swcLoader: false,
        swcMinify: false,
        cpus: Math.max(1, (Number(process.env.CIRCLE_NODE_TOTAL) || (_os.default.cpus() || {
            length: 1
        }).length) - 1),
        plugins: false,
        profiling: false,
        isrFlushToDisk: true,
        workerThreads: false,
        pageEnv: false,
        optimizeImages: false,
        optimizeCss: false,
        scrollRestoration: false,
        stats: false,
        externalDir: false,
        disableOptimizedLoading: false,
        gzipSize: true,
        craCompat: false,
        esmExternals: false,
        staticPageGenerationTimeout: 60,
        pageDataCollectionTimeout: 60,
        // default to 50MB limit
        isrMemoryCacheSize: 50 * 1024 * 1024,
        concurrentFeatures: false
    },
    future: {
        strictPostcssConfiguration: false
    }
};
exports.defaultConfig = defaultConfig;
function assignDefaultsBase(userConfig) {
    const config = Object.keys(userConfig).reduce((currentConfig, key)=>{
        const value = userConfig[key];
        if (value === undefined || value === null) {
            return currentConfig;
        }
        // Copied from assignDefaults in server/config.ts
        if (!!value && value.constructor === Object) {
            currentConfig[key] = {
                ...defaultConfig[key],
                ...Object.keys(value).reduce((c, k)=>{
                    const v = value[k];
                    if (v !== undefined && v !== null) {
                        c[k] = v;
                    }
                    return c;
                }, {
                })
            };
        } else {
            currentConfig[key] = value;
        }
        return currentConfig;
    }, {
    });
    const result = {
        ...defaultConfig,
        ...config
    };
    return result;
}
function normalizeConfig(phase, config) {
    if (typeof config === 'function') {
        config = config(phase, {
            defaultConfig
        });
        if (typeof config.then === 'function') {
            throw new Error('> Promise returned in blitz config. https://nextjs.org/docs/messages/promise-in-next-config');
        }
    }
    return config;
}
async function getConfigSrcPath(dir) {
    if (!dir) return null;
    let tsPath = (0, _path).join(dir, 'blitz.config.ts');
    let jsPath = (0, _path).join(dir, 'blitz.config.js');
    let legacyPath = (0, _path).join(dir, 'next.config.js');
    if ((0, _fs).existsSync(tsPath)) {
        return tsPath;
    } else if ((0, _fs).existsSync(jsPath)) {
        return jsPath;
    } else if ((0, _fs).existsSync(legacyPath)) {
        if (_utils.isInternalBlitzMonorepoDevelopment || process.env.VERCEL_BUILDER) {
            // We read from next.config.js that Vercel automatically adds
            debug('Using next.config.js because isInternalBlitzMonorepoDevelopment or VERCEL_BUILDER...');
            return legacyPath;
        } else {
            console.log('') // newline
            ;
            throw new Error('Blitz does not support next.config.js. Please rename it to blitz.config.js');
        }
    }
    if (process.env.__NEXT_TEST_MODE) {
        let tsPath2 = (0, _path).join(dir, '..', 'blitz.config.ts');
        let jsPath2 = (0, _path).join(dir, '..', 'blitz.config.js');
        let legacyPath2 = (0, _path).join(dir, '..', 'next.config.js');
        if ((0, _fs).existsSync(tsPath2)) {
            return tsPath2;
        } else if ((0, _fs).existsSync(jsPath2)) {
            return jsPath2;
        } else if ((0, _fs).existsSync(legacyPath2)) {
            return legacyPath2;
        }
    }
    return null;
}
function getCompiledConfigPath(dir) {
    return (0, _path).join(dir, _constants.CONFIG_FILE);
}
async function compileConfig(dir) {
    debug('Starting compileConfig...');
    if (!dir) {
        debug('compileConfig given empty dir argument');
        return;
    }
    const srcPath = await getConfigSrcPath(dir);
    debug('srcPath:', srcPath);
    const compiledPath = getCompiledConfigPath(dir);
    debug('compiledPath:', compiledPath);
    // Remove compiled file. This is important for example when user
    // had a config file but then removed it
    (0, _fsExtra).remove(compiledPath);
    if (!srcPath) {
        debug('Did not find a config file');
        return;
    }
    if ((0, _fs).readFileSync(srcPath, 'utf8').includes('tsconfig-paths/register')) {
        // User is manually handling their own typescript stuff
        debug("Config contains 'tsconfig-paths/register', so skipping build and just copying the file");
        await (0, _fsExtra).copy(srcPath, compiledPath);
        return;
    }
    const pkgJsonPath = await (0, _findUp).default('package.json', {
        cwd: dir
    });
    if (!pkgJsonPath) {
        // This will happen when running blitz no inside a blitz app
        debug('Unable to find package directory');
        return;
    }
    debug('Building config...');
    const pkg = require(pkgJsonPath);
    var ref, ref1;
    await (0, _esbuild).build({
        entryPoints: [
            srcPath
        ],
        outfile: compiledPath,
        format: 'cjs',
        bundle: true,
        platform: 'node',
        external: [
            '*.json',
            '@blitzjs',
            '@next',
            '@zeit',
            'blitz',
            'next',
            'webpack',
            ...Object.keys(require('blitz/package').dependencies),
            ...Object.keys((ref = pkg === null || pkg === void 0 ? void 0 : pkg.dependencies) !== null && ref !== void 0 ? ref : {
            }),
            ...Object.keys((ref1 = pkg === null || pkg === void 0 ? void 0 : pkg.devDependencies) !== null && ref1 !== void 0 ? ref1 : {
            }), 
        ]
    });
    debug('Config built.');
}

//# sourceMappingURL=config-shared.js.map