"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.printAndExit = printAndExit;
exports.getNodeOptionsWithoutInspect = getNodeOptionsWithoutInspect;
exports.getProjectRoot = getProjectRoot;
exports.getProjectRootSync = getProjectRootSync;
exports.getConfigSrcPath = getConfigSrcPath;
exports.prettyMs = prettyMs;
exports.getSessionCookiePrefix = getSessionCookiePrefix;
var _findUp = _interopRequireDefault(require("next/dist/compiled/find-up"));
var _path = _interopRequireWildcard(require("path"));
var _fsExtra = require("fs-extra");
var _constants = require("../../shared/lib/constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                    };
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
function printAndExit(message, code = 1) {
    if (code === 0) {
        console.log(message);
    } else {
        console.error(message);
    }
    process.exit(code);
}
function getNodeOptionsWithoutInspect() {
    const NODE_INSPECT_RE = /--inspect(-brk)?(=\S+)?( |$)/;
    return (process.env.NODE_OPTIONS || '').replace(NODE_INSPECT_RE, '');
}
async function getProjectRoot(dir) {
    const builtConfigPath = await (0, _findUp).default(_constants.CONFIG_FILE, {
        cwd: dir
    });
    if (builtConfigPath) return _path.default.dirname(builtConfigPath);
    const pkgJsonPath = await (0, _findUp).default('package.json', {
        cwd: dir
    });
    if (!pkgJsonPath) {
        throw new Error('Unable to find project root by looking for your package.json or for ' + _constants.CONFIG_FILE);
    }
    return (0, _path).dirname(pkgJsonPath);
}
function getProjectRootSync() {
    return _path.default.dirname(getConfigSrcPath());
}
function getConfigSrcPath() {
    const tsPath = _path.default.resolve(_path.default.join(process.cwd(), 'blitz.config.ts'));
    if ((0, _fsExtra).existsSync(tsPath)) {
        return tsPath;
    } else {
        const jsPath = _path.default.resolve(_path.default.join(process.cwd(), 'blitz.config.js'));
        return jsPath;
    }
}
function round(num, decimalPlaces) {
    const p = Math.pow(10, decimalPlaces);
    const m = num * p * (1 + Number.EPSILON);
    return Math.round(m) / p;
}
function prettyMs(ms) {
    if (Math.abs(ms) >= 1000) {
        return `${round(ms / 1000, 1)}s`;
    }
    return `${ms}ms`;
}
function getSessionCookiePrefix(config) {
    var ref, ref1;
    const middleware = (ref = config.middleware) === null || ref === void 0 ? void 0 : ref.filter((m)=>{
        var ref2;
        return ((ref2 = m.config) === null || ref2 === void 0 ? void 0 : ref2.name) === 'blitzSessionMiddleware';
    })[0];
    const sessionCookiePrefix = (middleware === null || middleware === void 0 ? void 0 : (ref1 = middleware.config) === null || ref1 === void 0 ? void 0 : ref1.cookiePrefix) || 'blitz';
    return sessionCookiePrefix;
}

//# sourceMappingURL=utils.js.map