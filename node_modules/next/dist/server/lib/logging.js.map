{"version":3,"sources":["../../../server/lib/logging.ts"],"sourcesContent":["import { ISettingsParam, Logger } from 'tslog'\nimport { loadConfigAtRuntime, LogLevel } from '../config-shared'\nimport c from 'chalk'\nimport { Table } from 'console-table-printer'\nimport ora from 'next/dist/compiled/ora'\nimport readline from 'readline'\n\n// eslint-disable-next-line\ndeclare module globalThis {\n  let _blitz_baseLogger: Logger\n  let _blitz_logLevel: LogLevel\n}\n\nexport const newline = () => {\n  globalThis._blitz_logLevel =\n    globalThis._blitz_logLevel ?? loadConfigAtRuntime().log?.level\n\n  const logLevel = globalThis._blitz_logLevel\n\n  switch (logLevel) {\n    case 'trace':\n    case 'debug':\n    case 'info':\n      console.log(' ')\n      break\n    case 'warn':\n    case 'error':\n    case 'fatal':\n    default:\n      //nothing\n      break\n  }\n}\n\nexport const baseLogger = (options?: ISettingsParam): Logger => {\n  if (globalThis._blitz_baseLogger) return globalThis._blitz_baseLogger\n\n  let config\n  try {\n    config = loadConfigAtRuntime()\n  } catch {\n    config = {}\n  }\n\n  globalThis._blitz_baseLogger = new Logger({\n    minLevel: config.log?.level || 'info',\n    type: config.log?.type || 'pretty',\n    dateTimePattern:\n      process.env.NODE_ENV === 'production'\n        ? 'year-month-day hour:minute:second.millisecond'\n        : 'hour:minute:second.millisecond',\n    displayFunctionName: false,\n    displayFilePath: 'hidden',\n    displayRequestId: false,\n    dateTimeTimezone:\n      process.env.NODE_ENV === 'production'\n        ? 'utc'\n        : Intl.DateTimeFormat().resolvedOptions().timeZone,\n    prettyInspectHighlightStyles: {\n      name: 'yellow',\n      number: 'blue',\n      bigint: 'blue',\n      boolean: 'blue',\n    },\n    colorizePrettyLogs: process.env.FORCE_COLOR === '0' ? false : true,\n    maskValuesOfKeys: ['password', 'passwordConfirmation'],\n    exposeErrorCodeFrame: process.env.NODE_ENV !== 'production',\n    ...options,\n  })\n\n  return globalThis._blitz_baseLogger\n}\n\nexport const table = Table\nexport const chalk = c\n\n// const blitzTrueBrandColor = '6700AB'\nconst blitzBrightBrandColor = '8a3df0'\n\n// Using bright brand color so it's better for dark terminals\nconst brandColor = blitzBrightBrandColor\n\nconst withBrand = (str: string) => {\n  return c.hex(brandColor).bold(str)\n}\n\nconst withCaret = (str: string) => {\n  return `${c.gray('>')} ${str}`\n}\n\nconst withCheck = (str: string) => {\n  return `${c.green('✔')} ${str}`\n}\n\nconst withProgress = (str: string) => {\n  return withCaret(str)\n}\n\n/**\n * Logs a branded purple message to stdout.\n *\n * @param {string} msg\n */\nconst branded = (msg: string) => {\n  console.log(c.hex(brandColor).bold(msg))\n}\n\n/**\n * Clears the line and optionally log a message to stdout.\n *\n * @param {string} msg\n */\nconst clearLine = (msg?: string) => {\n  readline.clearLine(process.stdout, 0)\n  readline.cursorTo(process.stdout, 0)\n  msg && process.stdout.write(msg)\n}\n\nconst clearConsole = () => {\n  if (process.platform === 'win32') {\n    process.stdout.write('\\x1B[2J\\x1B[0f')\n  } else {\n    process.stdout.write('\\x1B[2J\\x1B[3J\\x1B[H')\n  }\n}\n\n/**\n * Logs a progress message to stdout.\n *\n * @param {string} msg\n */\nconst progress = (msg: string) => {\n  console.log(withProgress(msg))\n}\n\nconst spinner = (str: string) => {\n  return ora({\n    text: str,\n    color: 'blue',\n    spinner: {\n      interval: 120,\n      frames: ['◢', '◣', '◤', '◥'],\n    },\n  })\n}\n\n/**\n * Logs a green success message to stdout.\n *\n * @param {string} msg\n */\nconst success = (msg: string) => {\n  console.log(withCheck(c.green(msg)))\n}\n\n/**\n * Colorizes a variable for display.\n *\n * @param {string} val\n */\nconst variable = (val: any) => {\n  return c.cyan.bold(`${val}`)\n}\n\n/**\n * If the DEBUG env var is set this will write to the console\n * @param str msg\n */\nconst debug = require('debug')('blitz')\n\nexport const log = {\n  withBrand,\n  withCaret,\n  branded,\n  clearLine,\n  clearConsole,\n  progress,\n  spinner,\n  success,\n  variable,\n  debug,\n  Table,\n}\n"],"names":[],"mappings":"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"}