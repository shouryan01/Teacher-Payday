"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.log = exports.chalk = exports.table = exports.baseLogger = exports.newline = void 0;
var _tslog = require("tslog");
var _configShared = require("../config-shared");
var _chalk = _interopRequireDefault(require("chalk"));
var _consoleTablePrinter = require("console-table-printer");
var _ora = _interopRequireDefault(require("next/dist/compiled/ora"));
var _readline = _interopRequireDefault(require("readline"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const newline = ()=>{
    var ref;
    var __blitz_logLevel;
    globalThis._blitz_logLevel = (__blitz_logLevel = globalThis._blitz_logLevel) !== null && __blitz_logLevel !== void 0 ? __blitz_logLevel : (ref = (0, _configShared).loadConfigAtRuntime().log) === null || ref === void 0 ? void 0 : ref.level;
    const logLevel = globalThis._blitz_logLevel;
    switch(logLevel){
        case 'trace':
        case 'debug':
        case 'info':
            console.log(' ');
            break;
        case 'warn':
        case 'error':
        case 'fatal':
        default:
            break;
    }
};
exports.newline = newline;
const baseLogger = (options)=>{
    var ref, ref1;
    if (globalThis._blitz_baseLogger) return globalThis._blitz_baseLogger;
    let config;
    try {
        config = (0, _configShared).loadConfigAtRuntime();
    } catch  {
        config = {
        };
    }
    globalThis._blitz_baseLogger = new _tslog.Logger({
        minLevel: ((ref = config.log) === null || ref === void 0 ? void 0 : ref.level) || 'info',
        type: ((ref1 = config.log) === null || ref1 === void 0 ? void 0 : ref1.type) || 'pretty',
        dateTimePattern: process.env.NODE_ENV === 'production' ? 'year-month-day hour:minute:second.millisecond' : 'hour:minute:second.millisecond',
        displayFunctionName: false,
        displayFilePath: 'hidden',
        displayRequestId: false,
        dateTimeTimezone: process.env.NODE_ENV === 'production' ? 'utc' : Intl.DateTimeFormat().resolvedOptions().timeZone,
        prettyInspectHighlightStyles: {
            name: 'yellow',
            number: 'blue',
            bigint: 'blue',
            boolean: 'blue'
        },
        colorizePrettyLogs: process.env.FORCE_COLOR === '0' ? false : true,
        maskValuesOfKeys: [
            'password',
            'passwordConfirmation'
        ],
        exposeErrorCodeFrame: process.env.NODE_ENV !== 'production',
        ...options
    });
    return globalThis._blitz_baseLogger;
};
exports.baseLogger = baseLogger;
const table = _consoleTablePrinter.Table;
exports.table = table;
const chalk = _chalk.default;
exports.chalk = chalk;
// const blitzTrueBrandColor = '6700AB'
const blitzBrightBrandColor = '8a3df0';
// Using bright brand color so it's better for dark terminals
const brandColor = blitzBrightBrandColor;
const withBrand = (str)=>{
    return _chalk.default.hex(brandColor).bold(str);
};
const withCaret = (str)=>{
    return `${_chalk.default.gray('>')} ${str}`;
};
const withCheck = (str)=>{
    return `${_chalk.default.green('✔')} ${str}`;
};
const withProgress = (str)=>{
    return withCaret(str);
};
/**
 * Logs a branded purple message to stdout.
 *
 * @param {string} msg
 */ const branded = (msg)=>{
    console.log(_chalk.default.hex(brandColor).bold(msg));
};
/**
 * Clears the line and optionally log a message to stdout.
 *
 * @param {string} msg
 */ const clearLine = (msg)=>{
    _readline.default.clearLine(process.stdout, 0);
    _readline.default.cursorTo(process.stdout, 0);
    msg && process.stdout.write(msg);
};
const clearConsole = ()=>{
    if (process.platform === 'win32') {
        process.stdout.write('\x1b[2J\x1b[0f');
    } else {
        process.stdout.write('\x1b[2J\x1b[3J\x1b[H');
    }
};
/**
 * Logs a progress message to stdout.
 *
 * @param {string} msg
 */ const progress = (msg)=>{
    console.log(withProgress(msg));
};
const spinner = (str)=>{
    return (0, _ora).default({
        text: str,
        color: 'blue',
        spinner: {
            interval: 120,
            frames: [
                '◢',
                '◣',
                '◤',
                '◥'
            ]
        }
    });
};
/**
 * Logs a green success message to stdout.
 *
 * @param {string} msg
 */ const success = (msg)=>{
    console.log(withCheck(_chalk.default.green(msg)));
};
/**
 * Colorizes a variable for display.
 *
 * @param {string} val
 */ const variable = (val)=>{
    return _chalk.default.cyan.bold(`${val}`);
};
/**
 * If the DEBUG env var is set this will write to the console
 * @param str msg
 */ const debug = require('debug')('blitz');
const log = {
    withBrand,
    withCaret,
    branded,
    clearLine,
    clearConsole,
    progress,
    spinner,
    success,
    variable,
    debug,
    Table: _consoleTablePrinter.Table
};
exports.log = log;

//# sourceMappingURL=logging.js.map