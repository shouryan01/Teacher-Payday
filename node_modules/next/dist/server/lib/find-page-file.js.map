{"version":3,"sources":["../../../server/lib/find-page-file.ts"],"sourcesContent":["import { join, sep as pathSeparator, normalize } from 'path'\nimport chalk from 'chalk'\nimport { warn } from '../../build/output/log'\nimport { promises } from 'fs'\nimport { denormalizePagePath, normalizePathSep } from '../normalize-page-path'\nimport { recursiveFindPages } from '../../lib/recursive-readdir'\nimport { getIsRpcRoute } from '../../shared/lib/utils'\nimport { buildPageExtensionRegex } from '../../build/utils'\n\nasync function isTrueCasePagePath(pagePath: string, pagesDir: string) {\n  const pageSegments = normalize(pagePath).split(pathSeparator).filter(Boolean)\n\n  const segmentExistsPromises = pageSegments.map(async (segment, i) => {\n    const segmentParentDir = join(pagesDir, ...pageSegments.slice(0, i))\n    const parentDirEntries = await promises.readdir(segmentParentDir)\n    return parentDirEntries.includes(segment)\n  })\n\n  return (await Promise.all(segmentExistsPromises)).every(Boolean)\n}\n\nexport async function findPageFile(\n  rootDir: string,\n  normalizedPagePath: string,\n  pageExtensions: string[]\n): Promise<string | null> {\n  const page = denormalizePagePath(normalizedPagePath)\n  // console.log('[findPageFile]', { rootDir, normalizedPagePath, page })\n\n  const allPages = await recursiveFindPages(\n    rootDir,\n    buildPageExtensionRegex(pageExtensions)\n  )\n  // console.log('allPages', allPages)\n\n  let nameMatch: string\n  if (getIsRpcRoute(page)) {\n    const rpcPath = page.replace('/api/rpc', '')\n    nameMatch = `(/queries${rpcPath}|/queries${rpcPath}/index|/mutations${rpcPath}|/mutations${rpcPath}/index)`\n  } else if (page.startsWith('/api/')) {\n    if (page.endsWith('/index')) {\n      nameMatch = `{page}`\n    } else {\n      nameMatch = `(${page}|${page}/index)`\n    }\n  } else if (page === '/') {\n    nameMatch = '/pages' + normalizedPagePath\n  } else if (page.endsWith('/index')) {\n    nameMatch = `/pages${page}/index`\n  } else {\n    nameMatch = `/pages(${page}|${page}/index)`\n  }\n\n  // Make the regex work for dynamic routes like [...auth].ts\n  nameMatch = nameMatch.replace(/[[\\]\\\\]/g, '\\\\$&')\n\n  const foundPagePaths = allPages.filter((path) =>\n    normalizePathSep(path).match(\n      new RegExp(`${nameMatch}\\\\.(?:${pageExtensions.join('|')})$`)\n    )\n  )\n  // console.log(new RegExp(`${nameMatch}\\\\.(?:${pageExtensions.join('|')})$`))\n  // console.log('FOUND', foundPagePaths)\n\n  if (foundPagePaths.length < 1) {\n    return null\n  }\n\n  if (!(await isTrueCasePagePath(foundPagePaths[0], rootDir))) {\n    return null\n  }\n\n  if (foundPagePaths.length > 1) {\n    warn(\n      `Duplicate page detected. ${chalk.cyan(\n        join('pages', foundPagePaths[0])\n      )} and ${chalk.cyan(\n        join('pages', foundPagePaths[1])\n      )} both resolve to ${chalk.cyan(normalizedPagePath)}.`\n    )\n  }\n\n  return foundPagePaths[0]\n}\n"],"names":[],"mappings":"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"}