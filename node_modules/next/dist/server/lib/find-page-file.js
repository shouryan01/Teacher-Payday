"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findPageFile = findPageFile;
var _path = require("path");
var _chalk = _interopRequireDefault(require("chalk"));
var _log = require("../../build/output/log");
var _fs = require("fs");
var _normalizePagePath = require("../normalize-page-path");
var _recursiveReaddir = require("../../lib/recursive-readdir");
var _utils = require("../../shared/lib/utils");
var _utils1 = require("../../build/utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function isTrueCasePagePath(pagePath, pagesDir) {
    const pageSegments = (0, _path).normalize(pagePath).split(_path.sep).filter(Boolean);
    const segmentExistsPromises = pageSegments.map(async (segment, i)=>{
        const segmentParentDir = (0, _path).join(pagesDir, ...pageSegments.slice(0, i));
        const parentDirEntries = await _fs.promises.readdir(segmentParentDir);
        return parentDirEntries.includes(segment);
    });
    return (await Promise.all(segmentExistsPromises)).every(Boolean);
}
async function findPageFile(rootDir, normalizedPagePath, pageExtensions) {
    const page = (0, _normalizePagePath).denormalizePagePath(normalizedPagePath);
    // console.log('[findPageFile]', { rootDir, normalizedPagePath, page })
    const allPages = await (0, _recursiveReaddir).recursiveFindPages(rootDir, (0, _utils1).buildPageExtensionRegex(pageExtensions));
    // console.log('allPages', allPages)
    let nameMatch;
    if ((0, _utils).getIsRpcRoute(page)) {
        const rpcPath = page.replace('/api/rpc', '');
        nameMatch = `(/queries${rpcPath}|/queries${rpcPath}/index|/mutations${rpcPath}|/mutations${rpcPath}/index)`;
    } else if (page.startsWith('/api/')) {
        if (page.endsWith('/index')) {
            nameMatch = `{page}`;
        } else {
            nameMatch = `(${page}|${page}/index)`;
        }
    } else if (page === '/') {
        nameMatch = '/pages' + normalizedPagePath;
    } else if (page.endsWith('/index')) {
        nameMatch = `/pages${page}/index`;
    } else {
        nameMatch = `/pages(${page}|${page}/index)`;
    }
    // Make the regex work for dynamic routes like [...auth].ts
    nameMatch = nameMatch.replace(/[[\]\\]/g, '\\$&');
    const foundPagePaths = allPages.filter((path)=>(0, _normalizePagePath).normalizePathSep(path).match(new RegExp(`${nameMatch}\\.(?:${pageExtensions.join('|')})$`))
    );
    // console.log(new RegExp(`${nameMatch}\\.(?:${pageExtensions.join('|')})$`))
    // console.log('FOUND', foundPagePaths)
    if (foundPagePaths.length < 1) {
        return null;
    }
    if (!await isTrueCasePagePath(foundPagePaths[0], rootDir)) {
        return null;
    }
    if (foundPagePaths.length > 1) {
        (0, _log).warn(`Duplicate page detected. ${_chalk.default.cyan((0, _path).join('pages', foundPagePaths[0]))} and ${_chalk.default.cyan((0, _path).join('pages', foundPagePaths[1]))} both resolve to ${_chalk.default.cyan(normalizedPagePath)}.`);
    }
    return foundPagePaths[0];
}

//# sourceMappingURL=find-page-file.js.map