import { Header, Redirect, Rewrite } from '../lib/load-custom-routes';
import { ImageConfig } from './image-config';
import { Middleware } from '../shared/lib/utils';
export declare type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';
export declare type LogType = 'json' | 'pretty' | 'hidden';
export declare function loadConfigAtRuntime(): NextConfigComplete;
export declare function loadConfigProduction(pagesDir: string): NextConfigComplete;
declare type NoOptionals<T> = {
    [P in keyof T]-?: T[P];
};
export declare type NextConfigComplete = NoOptionals<NextConfig> & {
    images: ImageConfig;
};
export interface I18NConfig {
    defaultLocale: string;
    domains?: DomainLocale[];
    localeDetection?: false;
    locales: string[];
}
export interface DomainLocale {
    defaultLocale: string;
    domain: string;
    http?: true;
    locales?: string[];
}
export interface ESLintConfig {
    /** Only run ESLint on these directories with `next lint` and `next build`. */
    dirs?: string[];
    /** Do not run ESLint during production builds (`next build`). */
    ignoreDuringBuilds?: boolean;
}
export declare type NextConfig = {
    [key: string]: any;
} & {
    i18n?: I18NConfig | null;
    eslint?: ESLintConfig;
    headers?: () => Promise<Header[]>;
    rewrites?: () => Promise<Rewrite[] | {
        beforeFiles: Rewrite[];
        afterFiles: Rewrite[];
        fallback: Rewrite[];
    }>;
    redirects?: () => Promise<Redirect[]>;
    webpack5?: false;
    excludeDefaultMomentLocales?: boolean;
    trailingSlash?: boolean;
    env?: {
        [key: string]: string | undefined;
    };
    distDir?: string;
    cleanDistDir?: boolean;
    assetPrefix?: string;
    useFileSystemPublicRoutes?: boolean;
    generateBuildId?: () => string | null;
    generateEtags?: boolean;
    pageExtensions?: string[];
    compress?: boolean;
    images?: Partial<ImageConfig>;
    devIndicators?: {
        buildActivity?: boolean;
    };
    onDemandEntries?: {
        maxInactiveAge?: number;
        pagesBufferLength?: number;
    };
    amp?: {
        canonicalBase?: string;
    };
    basePath?: string;
    sassOptions?: {
        [key: string]: any;
    };
    productionBrowserSourceMaps?: boolean;
    optimizeFonts?: boolean;
    reactStrictMode?: boolean;
    publicRuntimeConfig?: {
        [key: string]: any;
    };
    serverRuntimeConfig?: {
        [key: string]: any;
    };
    httpAgentOptions?: {
        keepAlive?: boolean;
    };
    cli?: {
        clearConsoleOnBlitzDev?: boolean;
        httpProxy?: string;
        httpsProxy?: string;
        noProxy?: string;
    };
    codegen?: {
        templateDir?: string;
    };
    log?: {
        level?: LogLevel;
        type?: LogType;
    };
    middleware?: Middleware[];
    customServer?: {
        hotReload?: boolean;
    };
    future?: {
        /**
         * @deprecated this options was moved to the top level
         */
        webpack5?: false;
        strictPostcssConfiguration?: boolean;
    };
    experimental?: {
        swcMinify?: boolean;
        swcLoader?: boolean;
        cpus?: number;
        plugins?: boolean;
        profiling?: boolean;
        isrFlushToDisk?: boolean;
        reactMode?: 'legacy' | 'concurrent' | 'blocking';
        workerThreads?: boolean;
        pageEnv?: boolean;
        optimizeImages?: boolean;
        optimizeCss?: boolean;
        scrollRestoration?: boolean;
        stats?: boolean;
        externalDir?: boolean;
        conformance?: boolean;
        amp?: {
            optimizer?: any;
            validator?: string;
            skipValidation?: boolean;
        };
        initServer?: () => void;
        reactRoot?: boolean;
        disableOptimizedLoading?: boolean;
        gzipSize?: boolean;
        craCompat?: boolean;
        esmExternals?: boolean | 'loose';
        staticPageGenerationTimeout?: number;
        pageDataCollectionTimeout?: number;
        isrMemoryCacheSize?: number;
        concurrentFeatures?: boolean;
    };
};
export declare type BlitzConfig = NextConfig;
export declare const defaultConfig: NextConfig;
export declare function assignDefaultsBase(userConfig: {
    [key: string]: any;
}): {
    [x: string]: any;
    i18n?: I18NConfig | null | undefined;
    eslint?: ESLintConfig | undefined;
    headers?: (() => Promise<Header[]>) | undefined;
    rewrites?: (() => Promise<Rewrite[] | {
        beforeFiles: Rewrite[];
        afterFiles: Rewrite[];
        fallback: Rewrite[];
    }>) | undefined;
    redirects?: (() => Promise<Redirect[]>) | undefined;
    webpack5?: false | undefined;
    excludeDefaultMomentLocales?: boolean | undefined;
    trailingSlash?: boolean | undefined;
    env?: {
        [key: string]: string | undefined;
    } | undefined;
    distDir?: string | undefined;
    cleanDistDir?: boolean | undefined;
    assetPrefix?: string | undefined;
    useFileSystemPublicRoutes?: boolean | undefined;
    generateBuildId?: (() => string | null) | undefined;
    generateEtags?: boolean | undefined;
    pageExtensions?: string[] | undefined;
    compress?: boolean | undefined;
    images?: Partial<ImageConfig> | undefined;
    devIndicators?: {
        buildActivity?: boolean | undefined;
    } | undefined;
    onDemandEntries?: {
        maxInactiveAge?: number | undefined;
        pagesBufferLength?: number | undefined;
    } | undefined;
    amp?: {
        canonicalBase?: string | undefined;
    } | undefined;
    basePath?: string | undefined;
    sassOptions?: {
        [key: string]: any;
    } | undefined;
    productionBrowserSourceMaps?: boolean | undefined;
    optimizeFonts?: boolean | undefined;
    reactStrictMode?: boolean | undefined;
    publicRuntimeConfig?: {
        [key: string]: any;
    } | undefined;
    serverRuntimeConfig?: {
        [key: string]: any;
    } | undefined;
    httpAgentOptions?: {
        keepAlive?: boolean | undefined;
    } | undefined;
    cli?: {
        clearConsoleOnBlitzDev?: boolean | undefined;
        httpProxy?: string | undefined;
        httpsProxy?: string | undefined;
        noProxy?: string | undefined;
    } | undefined;
    codegen?: {
        templateDir?: string | undefined;
    } | undefined;
    log?: {
        level?: LogLevel | undefined;
        type?: LogType | undefined;
    } | undefined;
    middleware?: Middleware[] | undefined;
    customServer?: {
        hotReload?: boolean | undefined;
    } | undefined;
    future?: {
        /**
         * @deprecated this options was moved to the top level
         */
        webpack5?: false | undefined;
        strictPostcssConfiguration?: boolean | undefined;
    } | undefined;
    experimental?: {
        swcMinify?: boolean | undefined;
        swcLoader?: boolean | undefined;
        cpus?: number | undefined;
        plugins?: boolean | undefined;
        profiling?: boolean | undefined;
        isrFlushToDisk?: boolean | undefined;
        reactMode?: "legacy" | "concurrent" | "blocking" | undefined;
        workerThreads?: boolean | undefined;
        pageEnv?: boolean | undefined;
        optimizeImages?: boolean | undefined;
        optimizeCss?: boolean | undefined;
        scrollRestoration?: boolean | undefined;
        stats?: boolean | undefined;
        externalDir?: boolean | undefined;
        conformance?: boolean | undefined;
        amp?: {
            optimizer?: any;
            validator?: string | undefined;
            skipValidation?: boolean | undefined;
        } | undefined;
        initServer?: (() => void) | undefined;
        reactRoot?: boolean | undefined;
        disableOptimizedLoading?: boolean | undefined;
        gzipSize?: boolean | undefined;
        craCompat?: boolean | undefined;
        esmExternals?: boolean | "loose" | undefined;
        staticPageGenerationTimeout?: number | undefined;
        pageDataCollectionTimeout?: number | undefined;
        isrMemoryCacheSize?: number | undefined;
        concurrentFeatures?: boolean | undefined;
    } | undefined;
};
export declare function normalizeConfig(phase: string, config: any): any;
export declare function getConfigSrcPath(dir: string | null): Promise<string | null>;
export declare function getCompiledConfigPath(dir: string): string;
export declare function compileConfig(dir: string | null): Promise<void>;
export {};
