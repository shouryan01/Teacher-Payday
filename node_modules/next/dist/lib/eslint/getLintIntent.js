"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getLintIntent = getLintIntent;
var _fs = require("fs");
var CommentJson = _interopRequireWildcard(require("next/dist/compiled/comment-json"));
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                    };
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
async function getLintIntent(eslintrcFile, pkgJsonEslintConfig) {
    if (eslintrcFile) {
        const content = await _fs.promises.readFile(eslintrcFile, {
            encoding: 'utf8'
        }).then((txt)=>txt.trim().replace(/\n/g, '')
        , ()=>null
        );
        // User is setting up ESLint for the first time setup if eslint config exists but is empty
        return {
            firstTimeSetup: content === '' || content === '{}' || content === '---' || content === 'module.exports = {}'
        };
    } else if (pkgJsonEslintConfig) {
        return {
            firstTimeSetup: CommentJson.stringify(pkgJsonEslintConfig) === '{}'
        };
    }
    return false;
}

//# sourceMappingURL=getLintIntent.js.map