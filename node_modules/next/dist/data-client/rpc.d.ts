import { Ctx } from '../types/index';
export declare type ResolverType = 'query' | 'mutation';
export interface BuildRpcClientParams {
    resolverName: string;
    resolverType: ResolverType;
    routePath: string;
}
export interface RpcOptions {
    fromQueryHook?: boolean;
    fromInvoke?: boolean;
    alreadySerialized?: boolean;
}
export interface EnhancedRpc {
    _isRpcClient: true;
    _resolverType: ResolverType;
    _resolverName: string;
    _routePath: string;
}
export interface RpcClientBase<Input = unknown, Result = unknown> {
    (params: Input, opts?: RpcOptions): Promise<Result>;
}
export interface RpcClient<Input = unknown, Result = unknown> extends EnhancedRpc, RpcClientBase<Input, Result> {
}
export interface RpcResolver<Input = unknown, Result = unknown> extends EnhancedRpc {
    (params: Input, ctx?: Ctx): Promise<Result>;
    middleware?: any;
}
export declare function buildRpcResolver(resolver: (params: unknown, ctx?: unknown) => unknown, { resolverName, resolverType, routePath, middleware, }: BuildRpcClientParams & {
    middleware?: any;
}): RpcResolver;
export declare function buildRpcClient({ resolverName, resolverType, routePath, }: BuildRpcClientParams): RpcClient;
