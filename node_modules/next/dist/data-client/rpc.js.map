{"version":3,"sources":["../../data-client/rpc.ts"],"sourcesContent":["import { normalizeApiRoute } from '../shared/lib/router/router'\nimport { deserialize, serialize } from 'superjson'\nimport { SuperJSONResult } from 'superjson/dist/types'\nimport { getAntiCSRFToken, getPublicDataStore } from './auth'\nimport {\n  HEADER_CSRF,\n  HEADER_CSRF_ERROR,\n  HEADER_PUBLIC_DATA_TOKEN,\n  HEADER_SESSION_CREATED,\n} from './constants'\nimport { isServer, CSRFTokenMismatchError } from '../stdlib/index'\nimport { getQueryKeyFromUrlAndParams, queryClient } from './react-query-utils'\nimport { Ctx } from '../types/index'\nconst debug = require('debug')('blitz:rpc')\n\nexport type ResolverType = 'query' | 'mutation'\n\nexport interface BuildRpcClientParams {\n  resolverName: string\n  resolverType: ResolverType\n  routePath: string\n}\n\nexport interface RpcOptions {\n  fromQueryHook?: boolean\n  fromInvoke?: boolean\n  alreadySerialized?: boolean\n}\n\nexport interface EnhancedRpc {\n  _isRpcClient: true\n  _resolverType: ResolverType\n  _resolverName: string\n  _routePath: string\n}\n\nexport interface RpcClientBase<Input = unknown, Result = unknown> {\n  (params: Input, opts?: RpcOptions): Promise<Result>\n}\n\nexport interface RpcClient<Input = unknown, Result = unknown>\n  extends EnhancedRpc,\n    RpcClientBase<Input, Result> {}\n\nexport interface RpcResolver<Input = unknown, Result = unknown>\n  extends EnhancedRpc {\n  (params: Input, ctx?: Ctx): Promise<Result>\n  middleware?: any\n}\n\nexport function buildRpcResolver(\n  resolver: (params: unknown, ctx?: unknown) => unknown,\n  {\n    resolverName,\n    resolverType,\n    routePath,\n    middleware,\n  }: BuildRpcClientParams & { middleware?: any }\n): RpcResolver {\n  const rpcResolver = (resolver as unknown) as RpcResolver\n\n  const fullRoutePath = normalizeApiRoute(routePath)\n\n  rpcResolver.middleware = middleware\n  rpcResolver._isRpcClient = true\n  rpcResolver._resolverName = resolverName\n  rpcResolver._resolverType = resolverType\n  rpcResolver._routePath = fullRoutePath\n\n  return rpcResolver\n}\n\nexport function buildRpcClient({\n  resolverName,\n  resolverType,\n  routePath,\n}: BuildRpcClientParams): RpcClient {\n  const fullRoutePath = normalizeApiRoute(routePath)\n\n  const httpClient: RpcClientBase = async (params, opts = {}) => {\n    if (!opts.fromQueryHook && !opts.fromInvoke) {\n      console.warn(\n        '[Deprecation] Directly calling queries/mutations is deprecated in favor of invoke(queryFn, params)'\n      )\n    }\n\n    if (isServer) {\n      return Promise.resolve() as unknown // as CancellablePromise<TResult>\n    }\n    debug('Starting request for', fullRoutePath, 'with', params, 'and', opts)\n\n    const headers: Record<string, any> = {\n      'Content-Type': 'application/json',\n    }\n\n    const antiCSRFToken = getAntiCSRFToken()\n    if (antiCSRFToken) {\n      debug('Adding antiCSRFToken cookie header', antiCSRFToken)\n      headers[HEADER_CSRF] = antiCSRFToken\n    } else {\n      debug('No antiCSRFToken cookie found')\n    }\n\n    let serialized: SuperJSONResult\n    if (opts.alreadySerialized) {\n      // params is already serialized with superjson when it gets here\n      // We have to serialize the params before passing to react-query in the query key\n      // because otherwise react-query will use JSON.parse(JSON.stringify)\n      // so by the time the arguments come here the real JS objects are lost\n      serialized = (params as unknown) as SuperJSONResult\n    } else {\n      serialized = serialize(params)\n    }\n\n    // Create a new AbortController instance for this request\n    const controller = new AbortController()\n\n    const promise = window\n      .fetch(fullRoutePath, {\n        method: 'POST',\n        headers,\n        credentials: 'include',\n        redirect: 'follow',\n        body: JSON.stringify({\n          params: serialized.json,\n          meta: {\n            params: serialized.meta,\n          },\n        }),\n        signal: controller.signal,\n      })\n      .then(async (response) => {\n        debug('Received request for', routePath)\n        if (response.headers) {\n          if (response.headers.get(HEADER_PUBLIC_DATA_TOKEN)) {\n            getPublicDataStore().updateState()\n            debug('Public data updated')\n          }\n          if (response.headers.get(HEADER_SESSION_CREATED)) {\n            // This also runs on logout, because on logout a new anon session is created\n            debug('Session created')\n            setTimeout(async () => {\n              // Do these in the next tick to prevent various bugs like https://github.com/blitz-js/blitz/issues/2207\n              debug('Invalidating react-query cache...')\n              await queryClient.cancelQueries()\n              await queryClient.resetQueries()\n              queryClient.getMutationCache().clear()\n              // We have a 100ms delay here to prevent unnecessary stale queries from running\n              // This prevents the case where you logout on a page with\n              // Page.authenticate = {redirectTo: '/login'}\n              // Without this delay, queries that require authentication on the original page\n              // will still run (but fail because you are now logged out)\n              // Ref: https://github.com/blitz-js/blitz/issues/1935\n            }, 100)\n          }\n          if (response.headers.get(HEADER_CSRF_ERROR)) {\n            const err = new CSRFTokenMismatchError()\n            err.stack = null!\n            throw err\n          }\n        }\n\n        if (!response.ok) {\n          const error = new Error(response.statusText)\n          ;(error as any).statusCode = response.status\n          ;(error as any).path = routePath\n          error.stack = null!\n          throw error\n        } else {\n          let payload\n          try {\n            payload = await response.json()\n          } catch (error) {\n            const err = new Error(`Failed to parse json from ${routePath}`)\n            err.stack = null!\n            throw err\n          }\n\n          if (payload.error) {\n            let error = deserialize({\n              json: payload.error,\n              meta: payload.meta?.error,\n            }) as any\n            // We don't clear the publicDataStore for anonymous users,\n            // because there is not sensitive data\n            if (\n              error.name === 'AuthenticationError' &&\n              getPublicDataStore().getData().userId\n            ) {\n              getPublicDataStore().clear()\n            }\n\n            const prismaError = error.message.match(\n              /invalid.*prisma.*invocation/i\n            )\n            if (prismaError && !('code' in error)) {\n              error = new Error(prismaError[0])\n              error.statusCode = 500\n            }\n\n            error.stack = null\n            throw error\n          } else {\n            const data = deserialize({\n              json: payload.result,\n              meta: payload.meta?.result,\n            })\n\n            if (!opts.fromQueryHook) {\n              const queryKey = getQueryKeyFromUrlAndParams(routePath, params)\n              queryClient.setQueryData(queryKey, data)\n            }\n            return data\n          }\n        }\n      }) // as CancellablePromise<TResult>\n\n    // Disable react-query request cancellation for now\n    // Having too many weird bugs with it enabled\n    // promise.cancel = () => controller.abort()\n\n    return promise\n  }\n\n  const rpcClient = httpClient as RpcClient\n\n  rpcClient._isRpcClient = true\n  rpcClient._resolverName = resolverName\n  rpcClient._resolverType = resolverType\n  rpcClient._routePath = fullRoutePath\n\n  return rpcClient\n}\n"],"names":[],"mappings":"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"}