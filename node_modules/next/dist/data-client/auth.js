"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parsePublicDataToken = exports.useAuthorize = exports.getAntiCSRFToken = exports.useAuthenticatedSession = exports.getPublicDataStore = exports.useRedirectAuthenticated = exports.useAuthorizeIf = exports.useSession = void 0;
var _b64Lite = require("b64-lite");
var _badBehavior = _interopRequireDefault(require("bad-behavior"));
var _constants = require("./constants");
var _index = require("../stdlib/index");
var _react = require("react");
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function assert(condition, message) {
    if (!condition) throw new Error(message);
}
const parsePublicDataToken = (token)=>{
    assert(token, '[parsePublicDataToken] Failed: token is empty');
    const publicDataStr = (0, _b64Lite).fromBase64(token);
    try {
        const publicData = JSON.parse(publicDataStr);
        return {
            publicData
        };
    } catch (error) {
        throw new Error(`[parsePublicDataToken] Failed to parse publicDataStr: ${publicDataStr}`);
    }
};
exports.parsePublicDataToken = parsePublicDataToken;
const emptyPublicData = {
    userId: null
};
class PublicDataStore {
    updateState(value, opts) {
        // We use localStorage as a message bus between tabs.
        // Setting the current time in ms will cause other tabs to receive the `storage` event
        if (!(opts === null || opts === void 0 ? void 0 : opts.suppressEvent)) {
            // Prevent infinite loop
            try {
                localStorage.setItem(this.eventKey, Date.now().toString());
            } catch (err) {
                console.error('LocalStorage is not available', err);
            }
        }
        this.observable.next(value !== null && value !== void 0 ? value : this.getData());
    }
    clear() {
        (0, _index).deleteCookie((0, _constants).COOKIE_PUBLIC_DATA_TOKEN());
        localStorage.removeItem((0, _constants).LOCALSTORAGE_PUBLIC_DATA_TOKEN());
        this.updateState(emptyPublicData);
    }
    getData() {
        const publicDataToken = this.getToken();
        if (!publicDataToken) {
            return emptyPublicData;
        }
        const { publicData  } = parsePublicDataToken(publicDataToken);
        return publicData;
    }
    getToken() {
        const cookieValue = (0, _index).readCookie((0, _constants).COOKIE_PUBLIC_DATA_TOKEN());
        if (cookieValue) {
            localStorage.setItem((0, _constants).LOCALSTORAGE_PUBLIC_DATA_TOKEN(), cookieValue);
            return cookieValue;
        } else {
            return localStorage.getItem((0, _constants).LOCALSTORAGE_PUBLIC_DATA_TOKEN());
        }
    }
    constructor(){
        this.eventKey = `${_constants.LOCALSTORAGE_PREFIX}publicDataUpdated`;
        this.observable = (0, _badBehavior).default();
        if (typeof window !== 'undefined') {
            // Set default value & prevent infinite loop
            this.updateState(undefined, {
                suppressEvent: true
            });
            window.addEventListener('storage', (event)=>{
                if (event.key === this.eventKey) {
                    // Prevent infinite loop
                    this.updateState(undefined, {
                        suppressEvent: true
                    });
                }
            });
        }
    }
}
const getPublicDataStore = ()=>{
    if (!window.__publicDataStore) {
        window.__publicDataStore = new PublicDataStore();
    }
    return window.__publicDataStore;
};
exports.getPublicDataStore = getPublicDataStore;
const getAntiCSRFToken = ()=>{
    const cookieValue = (0, _index).readCookie((0, _constants).COOKIE_CSRF_TOKEN());
    if (cookieValue) {
        localStorage.setItem((0, _constants).LOCALSTORAGE_CSRF_TOKEN(), cookieValue);
        return cookieValue;
    } else {
        return localStorage.getItem((0, _constants).LOCALSTORAGE_CSRF_TOKEN());
    }
};
exports.getAntiCSRFToken = getAntiCSRFToken;
const useSession = (options = {
})=>{
    var ref;
    const suspense = (ref = options === null || options === void 0 ? void 0 : options.suspense) !== null && ref !== void 0 ? ref : Boolean(process.env.__BLITZ_SUSPENSE_ENABLED);
    let initialState;
    if (options.initialPublicData) {
        initialState = _objectSpread({
        }, options.initialPublicData, {
            isLoading: false
        });
    } else if (suspense) {
        if (_index.isServer) {
            throw new Promise((_)=>{
            });
        } else {
            initialState = _objectSpread({
            }, getPublicDataStore().getData(), {
                isLoading: false
            });
        }
    } else {
        initialState = _objectSpread({
        }, emptyPublicData, {
            isLoading: true
        });
    }
    const [session, setSession] = (0, _react).useState(initialState);
    (0, _react).useEffect(()=>{
        // Initialize on mount
        setSession(_objectSpread({
        }, getPublicDataStore().getData(), {
            isLoading: false
        }));
        const subscription = getPublicDataStore().observable.subscribe((data)=>setSession(_objectSpread({
            }, data, {
                isLoading: false
            }))
        );
        return subscription.unsubscribe;
    }, []);
    return session;
};
exports.useSession = useSession;
const useAuthenticatedSession = (options = {
})=>{
    useAuthorize();
    return useSession(options);
};
exports.useAuthenticatedSession = useAuthenticatedSession;
const useAuthorize = ()=>{
    useAuthorizeIf(true);
};
exports.useAuthorize = useAuthorize;
const useAuthorizeIf = (condition)=>{
    if (_index.isClient && condition && !getPublicDataStore().getData().userId) {
        const error = new _index.AuthenticationError();
        error.stack = null;
        throw error;
    }
};
exports.useAuthorizeIf = useAuthorizeIf;
const useRedirectAuthenticated = (to)=>{
    if (_index.isClient && getPublicDataStore().getData().userId) {
        const error = new _index.RedirectError(to);
        error.stack = null;
        throw error;
    }
};
exports.useRedirectAuthenticated = useRedirectAuthenticated;

//# sourceMappingURL=auth.js.map