{"version":3,"sources":["../../data-client/react-query-utils.ts"],"sourcesContent":["import { QueryClient, QueryKey } from 'react-query'\nimport { serialize } from 'superjson'\nimport { isClient, isServer } from '../stdlib/index'\nimport { requestIdleCallback } from '../client/request-idle-callback'\nimport { ResolverType, RpcClient } from './rpc'\nimport { AsyncFunc } from '../types/utils'\nimport { Resolver } from '../server/api-utils'\n\ntype MutateOptions = {\n  refetch?: boolean\n}\n\nexport const initializeQueryClient = () => {\n  let suspenseEnabled = true\n  if (!process.env.CLI_COMMAND_CONSOLE && !process.env.CLI_COMMAND_DB) {\n    suspenseEnabled = Boolean(process.env.__BLITZ_SUSPENSE_ENABLED)\n  }\n\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        ...(isServer && { cacheTime: 0 }),\n        suspense: suspenseEnabled,\n        retry: (failureCount, error: any) => {\n          if (process.env.NODE_ENV !== 'production') return false\n\n          // Retry (max. 3 times) only if network error detected\n          if (error.message === 'Network request failed' && failureCount <= 3)\n            return true\n\n          return false\n        },\n      },\n    },\n  })\n}\n\n// Create internal QueryClient instance\nexport const queryClient = initializeQueryClient()\n\nfunction isRpcClient(f: any): f is RpcClient<any, any> {\n  return !!f._isRpcClient\n}\n\nexport interface QueryCacheFunctions<T> {\n  setQueryData: (\n    newData: T | ((oldData: T | undefined) => T),\n    opts?: MutateOptions\n  ) => ReturnType<typeof setQueryData>\n}\n\nexport const getQueryCacheFunctions = <TInput, TResult, T extends AsyncFunc>(\n  resolver: T | Resolver<TInput, TResult> | RpcClient<TInput, TResult>,\n  params: TInput\n): QueryCacheFunctions<TResult> => ({\n  setQueryData: (newData, opts = { refetch: true }) => {\n    return setQueryData(resolver, params, newData, opts)\n  },\n})\n\nexport const emptyQueryFn: RpcClient<unknown, unknown> = (() => {\n  const fn = ((() => new Promise(() => {})) as any) as RpcClient\n  fn._isRpcClient = true\n  return fn\n})()\n\nconst isNotInUserTestEnvironment = () => {\n  if (process.env.JEST_WORKER_ID === undefined) return true\n  if (process.env.BLITZ_TEST_ENVIRONMENT !== undefined) return true\n  return false\n}\n\nexport const validateQueryFn = <TInput, TResult>(\n  queryFn: Resolver<TInput, TResult> | RpcClient<TInput, TResult>\n) => {\n  if (isClient && !isRpcClient(queryFn) && isNotInUserTestEnvironment()) {\n    throw new Error(\n      `Either the file path to your resolver is incorrect (must be in a \"queries\" or \"mutations\" folder that isn't nested inside \"pages\" or \"api\") or you are trying to use Blitz's useQuery to fetch from third-party APIs (to do that, import useQuery directly from \"react-query\")`\n    )\n  }\n}\n\nconst sanitize = (type: ResolverType) => <TInput, TResult>(\n  queryFn: Resolver<TInput, TResult> | RpcClient<TInput, TResult>\n): RpcClient<TInput, TResult> => {\n  if (isServer) return queryFn as any\n\n  validateQueryFn(queryFn)\n\n  const rpcClient = queryFn as RpcClient<TInput, TResult>\n\n  const queryFnName = type === 'mutation' ? 'useMutation' : 'useQuery'\n\n  if (rpcClient._resolverType !== type && isNotInUserTestEnvironment()) {\n    throw new Error(\n      `\"${queryFnName}\" was expected to be called with a ${type} but was called with a \"${rpcClient._resolverType}\"`\n    )\n  }\n\n  return rpcClient\n}\n\nexport const sanitizeQuery = sanitize('query')\nexport const sanitizeMutation = sanitize('mutation')\n\nexport const getQueryKeyFromUrlAndParams = (url: string, params: unknown) => {\n  const queryKey = [url]\n\n  const args = typeof params === 'function' ? (params as Function)() : params\n  queryKey.push(serialize(args) as any)\n\n  return queryKey as [string, any]\n}\n\nexport function getQueryKey<TInput, TResult, T extends AsyncFunc>(\n  resolver: T | Resolver<TInput, TResult> | RpcClient<TInput, TResult>,\n  params?: TInput\n) {\n  if (typeof resolver === 'undefined') {\n    throw new Error(\n      'getQueryKey is missing the first argument - it must be a resolver function'\n    )\n  }\n\n  return getQueryKeyFromUrlAndParams(sanitizeQuery(resolver)._routePath, params)\n}\n\nexport function getInfiniteQueryKey<TInput, TResult, T extends AsyncFunc>(\n  resolver: T | Resolver<TInput, TResult> | RpcClient<TInput, TResult>,\n  params?: TInput\n) {\n  if (typeof resolver === 'undefined') {\n    throw new Error(\n      'getInfiniteQueryKey is missing the first argument - it must be a resolver function'\n    )\n  }\n\n  const queryKey = getQueryKeyFromUrlAndParams(\n    sanitizeQuery(resolver)._routePath,\n    params\n  )\n  return [...queryKey, 'infinite']\n}\n\nexport function invalidateQuery<TInput, TResult, T extends AsyncFunc>(\n  resolver: T | Resolver<TInput, TResult> | RpcClient<TInput, TResult>,\n  params?: TInput\n) {\n  if (typeof resolver === 'undefined') {\n    throw new Error(\n      'invalidateQuery is missing the first argument - it must be a resolver function'\n    )\n  }\n\n  const fullQueryKey = getQueryKey(resolver, params)\n  let queryKey: QueryKey\n  if (params) {\n    queryKey = fullQueryKey\n  } else {\n    // Params not provided, only use first query key item (url)\n    queryKey = fullQueryKey[0]\n  }\n  return queryClient.invalidateQueries(queryKey)\n}\n\nexport function setQueryData<TInput, TResult, T extends AsyncFunc>(\n  resolver: T | Resolver<TInput, TResult> | RpcClient<TInput, TResult>,\n  params: TInput,\n  newData: TResult | ((oldData: TResult | undefined) => TResult),\n  opts: MutateOptions = { refetch: true }\n): Promise<void | ReturnType<typeof queryClient.invalidateQueries>> {\n  if (typeof resolver === 'undefined') {\n    throw new Error(\n      'setQueryData is missing the first argument - it must be a resolver function'\n    )\n  }\n  const queryKey = getQueryKey(resolver, params)\n\n  return new Promise((res) => {\n    queryClient.setQueryData(queryKey, newData)\n    let result: void | ReturnType<typeof queryClient.invalidateQueries>\n    if (opts.refetch) {\n      result = invalidateQuery(resolver, params)\n    }\n    if (isClient) {\n      // Fix for https://github.com/blitz-js/blitz/issues/1174\n      requestIdleCallback(() => {\n        res(result)\n      })\n    } else {\n      res(result)\n    }\n  })\n}\n"],"names":[],"mappings":"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"}