"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useQuery = useQuery;
exports.usePaginatedQuery = usePaginatedQuery;
exports.useInfiniteQuery = useInfiniteQuery;
exports.useMutation = useMutation;
var _reactQuery = require("react-query");
var _auth = require("./auth");
var _index = require("../stdlib/index");
var _reactQueryUtils = require("./react-query-utils");
var _router = require("../client/router");
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useQuery(queryFn, params, options = {
}) {
    if (typeof queryFn === 'undefined') {
        throw new Error('useQuery is missing the first argument - it must be a query function');
    }
    const suspenseEnabled = Boolean(process.env.__BLITZ_SUSPENSE_ENABLED);
    var ref;
    let enabled = _index.isServer && suspenseEnabled ? false : (ref = options === null || options === void 0 ? void 0 : options.enabled) !== null && ref !== void 0 ? ref : (options === null || options === void 0 ? void 0 : options.enabled) !== null;
    const suspense = enabled === false ? false : options === null || options === void 0 ? void 0 : options.suspense;
    const session = (0, _auth).useSession({
        suspense
    });
    if (session.isLoading) {
        enabled = false;
    }
    const routerIsReady = (0, _router).useRouter().isReady || _index.isServer && suspenseEnabled;
    const enhancedResolverRpcClient = (0, _reactQueryUtils).sanitizeQuery(queryFn);
    const queryKey = (0, _reactQueryUtils).getQueryKey(queryFn, params);
    const _ref = (0, _reactQuery).useQuery(_objectSpread({
        queryKey: routerIsReady ? queryKey : [
            '_routerNotReady_'
        ],
        queryFn: routerIsReady ? ()=>enhancedResolverRpcClient(params, {
                fromQueryHook: true
            })
         : _reactQueryUtils.emptyQueryFn
    }, options, {
        enabled
    })), { data  } = _ref, queryRest = _objectWithoutProperties(_ref, ["data"]);
    if (queryRest.isIdle && _index.isServer && suspenseEnabled !== false && !data && (!options || !('suspense' in options) || options.suspense) && (!options || !('enabled' in options) || options.enabled)) {
        throw new Promise(()=>{
        });
    }
    const rest = _objectSpread({
    }, queryRest, (0, _reactQueryUtils).getQueryCacheFunctions(queryFn, params));
    // return [data, rest as RestQueryResult<TResult>]
    return [
        data,
        rest
    ];
}
function usePaginatedQuery(queryFn, params, options = {
}) {
    if (typeof queryFn === 'undefined') {
        throw new Error('usePaginatedQuery is missing the first argument - it must be a query function');
    }
    const suspenseEnabled = Boolean(process.env.__BLITZ_SUSPENSE_ENABLED);
    var ref;
    let enabled = _index.isServer && suspenseEnabled ? false : (ref = options === null || options === void 0 ? void 0 : options.enabled) !== null && ref !== void 0 ? ref : (options === null || options === void 0 ? void 0 : options.enabled) !== null;
    const suspense = enabled === false ? false : options === null || options === void 0 ? void 0 : options.suspense;
    const session = (0, _auth).useSession({
        suspense
    });
    if (session.isLoading) {
        enabled = false;
    }
    const routerIsReady = (0, _router).useRouter().isReady || _index.isServer && suspenseEnabled;
    const enhancedResolverRpcClient = (0, _reactQueryUtils).sanitizeQuery(queryFn);
    const queryKey = (0, _reactQueryUtils).getQueryKey(queryFn, params);
    const _ref = (0, _reactQuery).useQuery(_objectSpread({
        queryKey: routerIsReady ? queryKey : [
            '_routerNotReady_'
        ],
        queryFn: routerIsReady ? ()=>enhancedResolverRpcClient(params, {
                fromQueryHook: true
            })
         : _reactQueryUtils.emptyQueryFn
    }, options, {
        keepPreviousData: true,
        enabled
    })), { data  } = _ref, queryRest = _objectWithoutProperties(_ref, ["data"]);
    if (queryRest.isIdle && _index.isServer && suspenseEnabled !== false && !data && (!options || !('suspense' in options) || options.suspense) && (!options || !('enabled' in options) || options.enabled)) {
        throw new Promise(()=>{
        });
    }
    const rest = _objectSpread({
    }, queryRest, (0, _reactQueryUtils).getQueryCacheFunctions(queryFn, params));
    // return [data, rest as RestPaginatedResult<TResult>]
    return [
        data,
        rest
    ];
}
function useInfiniteQuery(queryFn, getQueryParams, options) {
    if (typeof queryFn === 'undefined') {
        throw new Error('useInfiniteQuery is missing the first argument - it must be a query function');
    }
    const suspenseEnabled = Boolean(process.env.__BLITZ_SUSPENSE_ENABLED);
    var ref;
    let enabled = _index.isServer && suspenseEnabled ? false : (ref = options === null || options === void 0 ? void 0 : options.enabled) !== null && ref !== void 0 ? ref : (options === null || options === void 0 ? void 0 : options.enabled) !== null;
    const suspense = enabled === false ? false : options === null || options === void 0 ? void 0 : options.suspense;
    const session = (0, _auth).useSession({
        suspense
    });
    if (session.isLoading) {
        enabled = false;
    }
    const routerIsReady = (0, _router).useRouter().isReady || _index.isServer && suspenseEnabled;
    const enhancedResolverRpcClient = (0, _reactQueryUtils).sanitizeQuery(queryFn);
    const queryKey = (0, _reactQueryUtils).getInfiniteQueryKey(queryFn, getQueryParams);
    const _ref = (0, _reactQuery).useInfiniteQuery(_objectSpread({
        // we need an extra cache key for infinite loading so that the cache for
        // for this query is stored separately since the hook result is an array of results.
        // Without this cache for usePaginatedQuery and this will conflict and break.
        queryKey: routerIsReady ? queryKey : [
            '_routerNotReady_'
        ],
        queryFn: routerIsReady ? ({ pageParam  })=>enhancedResolverRpcClient(getQueryParams(pageParam), {
                fromQueryHook: true
            })
         : _reactQueryUtils.emptyQueryFn
    }, options, {
        enabled
    })), { data  } = _ref, queryRest = _objectWithoutProperties(_ref, ["data"]);
    if (queryRest.isIdle && _index.isServer && suspenseEnabled !== false && !data && (!options || !('suspense' in options) || options.suspense) && (!options || !('enabled' in options) || options.enabled)) {
        throw new Promise(()=>{
        });
    }
    const rest = _objectSpread({
    }, queryRest, (0, _reactQueryUtils).getQueryCacheFunctions(queryFn, getQueryParams), {
        pageParams: data === null || data === void 0 ? void 0 : data.pageParams
    });
    return [
        data === null || data === void 0 ? void 0 : data.pages,
        rest
    ];
}
function useMutation(mutationResolver, config) {
    const enhancedResolverRpcClient = (0, _reactQueryUtils).sanitizeMutation(mutationResolver);
    const _ref = (0, _reactQuery).useMutation((variables)=>enhancedResolverRpcClient(variables, {
            fromQueryHook: true
        })
    , _objectSpread({
        throwOnError: true
    }, config)), { mutate , mutateAsync  } = _ref, rest = _objectWithoutProperties(_ref, ["mutate", "mutateAsync"]);
    return [
        mutateAsync,
        rest
    ];
}

//# sourceMappingURL=react-query.js.map