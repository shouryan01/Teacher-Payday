import { PublicData, EmptyPublicData, AuthenticatedClientSession, ClientSession } from '../shared/lib/utils';
import { UrlObject } from 'url';
export declare const parsePublicDataToken: (token: string) => {
    publicData: {
        userId: unknown;
    };
};
declare class PublicDataStore {
    private eventKey;
    readonly observable: {
        next: (n: {
            userId: unknown;
        } | EmptyPublicData) => void;
        subscribe: (fn: import("bad-behavior").ISubscriber<{
            userId: unknown;
        } | EmptyPublicData>) => {
            unsubscribe(): void;
        };
    };
    constructor();
    updateState(value?: PublicData | EmptyPublicData, opts?: {
        suppressEvent: boolean;
    }): void;
    clear(): void;
    getData(): {
        userId: unknown;
    };
    private getToken;
}
export declare const getPublicDataStore: () => PublicDataStore;
export declare const getAntiCSRFToken: () => any;
interface UseSessionOptions {
    initialPublicData?: PublicData;
    suspense?: boolean | null;
}
export declare const useSession: (options?: UseSessionOptions) => ClientSession;
export declare const useAuthenticatedSession: (options?: UseSessionOptions) => AuthenticatedClientSession;
export declare const useAuthorize: () => void;
export declare const useAuthorizeIf: (condition?: boolean | undefined) => void;
export declare const useRedirectAuthenticated: (to: UrlObject | string) => void;
export {};
