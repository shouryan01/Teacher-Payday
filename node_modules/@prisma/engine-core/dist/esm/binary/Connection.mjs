var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import getStream from "get-stream";
import { Pool } from "undici";
function assertHasPool(pool) {
  if (pool === void 0) {
    throw new Error("Connection has not been opened");
  }
}
__name(assertHasPool, "assertHasPool");
class Connection {
  constructor() {
  }
  static async onHttpError(response, handler) {
    const _response = await response;
    if (_response.statusCode >= 400) {
      return handler(_response);
    }
    return _response;
  }
  open(url, options) {
    if (this._pool)
      return;
    this._pool = new Pool(url, {
      connections: 1e3,
      keepAliveMaxTimeout: 6e5,
      headersTimeout: 0,
      ...options
    });
  }
  async raw(method, endpoint, headers, body) {
    assertHasPool(this._pool);
    const response = await this._pool.request({
      path: endpoint,
      method,
      headers: {
        "Content-Type": "application/json",
        ...headers
      },
      body,
      bodyTimeout: 0
    });
    const result = {
      statusCode: response.statusCode,
      headers: response.headers,
      data: JSON.parse(await getStream(response.body))
    };
    return result;
  }
  post(endpoint, body, headers) {
    return this.raw("POST", endpoint, headers, body);
  }
  get(path, headers) {
    return this.raw("GET", path, headers);
  }
  close() {
    if (this._pool) {
      this._pool.close(() => {
      });
    }
    this._pool = void 0;
  }
}
__name(Connection, "Connection");
export {
  Connection
};
