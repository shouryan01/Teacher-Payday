var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import { BadRequestError } from "../BadRequestError";
import { NotFoundError } from "../NotFoundError";
import { SchemaMissingError } from "../SchemaMissingError";
import { ServerError } from "../ServerError";
import { UnauthorizedError } from "../UnauthorizedError";
import { UsageExceededError } from "../UsageExceededError";
async function responseToError(response, clientVersion) {
  if (response.ok)
    return void 0;
  const info = { clientVersion, response };
  if (response.status === 401) {
    throw new UnauthorizedError(info);
  }
  if (response.status === 404) {
    try {
      const body = await response.json();
      const isSchemaMissing = body?.EngineNotStarted?.reason === "SchemaMissing";
      return isSchemaMissing ? new SchemaMissingError(info) : new NotFoundError(info);
    } catch (err) {
      return new NotFoundError(info);
    }
  }
  if (response.status === 429) {
    throw new UsageExceededError(info);
  }
  if (response.status >= 500) {
    throw new ServerError(info);
  }
  if (response.status >= 400) {
    throw new BadRequestError(info);
  }
  return void 0;
}
__name(responseToError, "responseToError");
export {
  responseToError
};
