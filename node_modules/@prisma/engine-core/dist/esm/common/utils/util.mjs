var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import fs from "fs";
import terminalLink from "terminal-link";
import newGithubIssueUrl from "new-github-issue-url";
import chalk from "chalk";
import Debug from "@prisma/debug";
import crypto from "crypto";
const debug = Debug("plusX");
function plusX(file) {
  const s = fs.statSync(file);
  const newMode = s.mode | 64 | 8 | 1;
  if (s.mode === newMode) {
    debug(`Execution permissions of ${file} are fine`);
    return;
  }
  const base8 = newMode.toString(8).slice(-3);
  debug(`Have to call plusX on ${file}`);
  fs.chmodSync(file, base8);
}
__name(plusX, "plusX");
function transformPlatformToEnvValue(platform) {
  return { fromEnvVar: null, value: platform };
}
__name(transformPlatformToEnvValue, "transformPlatformToEnvValue");
function fixBinaryTargets(binaryTargets, platform) {
  binaryTargets = binaryTargets || [];
  if (!binaryTargets.find((object) => object.value === "native")) {
    return [transformPlatformToEnvValue("native"), ...binaryTargets];
  }
  return [...binaryTargets, transformPlatformToEnvValue(platform)];
}
__name(fixBinaryTargets, "fixBinaryTargets");
function link(url) {
  return terminalLink(url, url, {
    fallback: (url2) => chalk.underline(url2)
  });
}
__name(link, "link");
function getGithubIssueUrl({
  title,
  user = "prisma",
  repo = "prisma",
  template = "bug_report.md",
  body
}) {
  return newGithubIssueUrl({
    user,
    repo,
    template,
    title,
    body
  });
}
__name(getGithubIssueUrl, "getGithubIssueUrl");
function getRandomString() {
  return crypto.randomBytes(12).toString("hex");
}
__name(getRandomString, "getRandomString");
export {
  fixBinaryTargets,
  getGithubIssueUrl,
  getRandomString,
  link,
  plusX
};
