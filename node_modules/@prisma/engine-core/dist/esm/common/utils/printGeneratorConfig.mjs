var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import indent from "indent-string";
function printGeneratorConfig(config) {
  return String(new GeneratorConfigClass(config));
}
__name(printGeneratorConfig, "printGeneratorConfig");
class GeneratorConfigClass {
  constructor(config) {
    this.config = config;
  }
  toString() {
    const { config } = this;
    const provider = config.provider.fromEnvVar ? `env("${config.provider.fromEnvVar}")` : config.provider.value;
    const obj = JSON.parse(JSON.stringify({
      provider,
      binaryTargets: getOriginalBinaryTargetsValue(config.binaryTargets)
    }));
    return `generator ${config.name} {
${indent(printDatamodelObject(obj), 2)}
}`;
  }
}
__name(GeneratorConfigClass, "GeneratorConfigClass");
function getOriginalBinaryTargetsValue(binaryTargets) {
  let value;
  if (binaryTargets.length > 0) {
    const binaryTargetsFromEnvVar = binaryTargets.find((object) => object.fromEnvVar !== null);
    if (binaryTargetsFromEnvVar) {
      value = `env("${binaryTargetsFromEnvVar.fromEnvVar}")`;
    } else {
      value = binaryTargets.map((object) => object.value);
    }
  } else {
    value = void 0;
  }
  return value;
}
__name(getOriginalBinaryTargetsValue, "getOriginalBinaryTargetsValue");
function printDatamodelObject(obj) {
  const maxLength = Object.keys(obj).reduce((max, curr) => Math.max(max, curr.length), 0);
  return Object.entries(obj).map(([key, value]) => `${key.padEnd(maxLength)} = ${niceStringify(value)}`).join("\n");
}
__name(printDatamodelObject, "printDatamodelObject");
function niceStringify(value) {
  return JSON.parse(JSON.stringify(value, (_, value2) => {
    if (Array.isArray(value2)) {
      return `[${value2.map((element) => JSON.stringify(element)).join(", ")}]`;
    }
    return JSON.stringify(value2);
  }));
}
__name(niceStringify, "niceStringify");
export {
  GeneratorConfigClass,
  getOriginalBinaryTargetsValue,
  printDatamodelObject,
  printGeneratorConfig
};
