var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function getMessage(log) {
  if (typeof log === "string") {
    return log;
  } else if (isRustError(log)) {
    return getBacktraceFromRustError(log);
  } else if (isRustLog(log)) {
    return getBacktraceFromLog(log);
  }
  return JSON.stringify(log);
}
__name(getMessage, "getMessage");
function getBacktraceFromLog(log) {
  if (log.fields?.message) {
    let str = log.fields?.message;
    if (log.fields?.file) {
      str += ` in ${log.fields.file}`;
      if (log.fields?.line) {
        str += `:${log.fields.line}`;
      }
      if (log.fields?.column) {
        str += `:${log.fields.column}`;
      }
    }
    if (log.fields?.reason) {
      str += `
${log.fields?.reason}`;
    }
    return str;
  }
  return "Unknown error";
}
__name(getBacktraceFromLog, "getBacktraceFromLog");
function getBacktraceFromRustError(err) {
  let str = "";
  if (err.is_panic) {
    str += `PANIC`;
  }
  if (err.backtrace) {
    str += ` in ${err.backtrace}`;
  }
  if (err.message) {
    str += `
${err.message}`;
  }
  return str;
}
__name(getBacktraceFromRustError, "getBacktraceFromRustError");
function isRustLog(e) {
  return e.timestamp && typeof e.level === "string" && typeof e.target === "string";
}
__name(isRustLog, "isRustLog");
function isRustErrorLog(e) {
  return isRustLog(e) && (e.level === "error" || e.fields?.message?.includes("fatal error"));
}
__name(isRustErrorLog, "isRustErrorLog");
function isRustError(e) {
  return typeof e.is_panic !== "undefined";
}
__name(isRustError, "isRustError");
function convertLog(rustLog) {
  const isQuery = isQueryLog(rustLog.fields);
  const level = isQuery ? "query" : rustLog.level.toLowerCase();
  return {
    ...rustLog,
    level,
    timestamp: new Date(new Date().getFullYear() + " " + rustLog.timestamp)
  };
}
__name(convertLog, "convertLog");
function isQueryLog(fields) {
  return Boolean(fields.query);
}
__name(isQueryLog, "isQueryLog");
export {
  convertLog,
  getBacktraceFromLog,
  getBacktraceFromRustError,
  getMessage,
  isRustError,
  isRustErrorLog,
  isRustLog
};
