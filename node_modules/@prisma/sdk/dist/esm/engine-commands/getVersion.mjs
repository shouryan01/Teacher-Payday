var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import Debug from "@prisma/debug";
import { getCliQueryEngineBinaryType } from "@prisma/engines";
import { BinaryType } from "@prisma/fetch-engine";
import { isNodeAPISupported } from "@prisma/get-platform";
import execa from "execa";
import { resolveBinary } from "../resolveBinary";
import { load } from "../utils/load";
const debug = Debug("prisma:getVersion");
const MAX_BUFFER = 1e9;
async function getVersion(enginePath, binaryName) {
  if (!binaryName) {
    binaryName = getCliQueryEngineBinaryType();
  }
  enginePath = await resolveBinary(binaryName, enginePath);
  if (binaryName === BinaryType.libqueryEngine) {
    await isNodeAPISupported();
    const QE = load(enginePath);
    return `libquery-engine ${QE.version().commit}`;
  } else {
    const result = await execa(enginePath, ["--version"], {
      maxBuffer: MAX_BUFFER
    });
    return result.stdout;
  }
}
__name(getVersion, "getVersion");
export {
  getVersion
};
