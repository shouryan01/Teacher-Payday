var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import chalk from "chalk";
import Debug from "@prisma/debug";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { dotenvExpand } from "../dotenvExpand";
const debug = Debug("prisma:tryLoadEnv");
function tryLoadEnvs({
  rootEnvPath,
  schemaEnvPath
}, opts = {
  conflictCheck: "none"
}) {
  const rootEnvInfo = loadEnv(rootEnvPath);
  if (opts.conflictCheck !== "none") {
    checkForConflicts(rootEnvInfo, schemaEnvPath, opts.conflictCheck);
  }
  let schemaEnvInfo = null;
  if (!pathsEqual(rootEnvInfo?.path, schemaEnvPath)) {
    schemaEnvInfo = loadEnv(schemaEnvPath);
  }
  if (!rootEnvInfo && !schemaEnvInfo) {
    debug("No Environment variables loaded");
  }
  if (schemaEnvInfo?.dotenvResult.error) {
    return console.error(chalk.redBright.bold("Schema Env Error: ") + schemaEnvInfo.dotenvResult.error);
  }
  const messages = [rootEnvInfo?.message, schemaEnvInfo?.message].filter(Boolean);
  return {
    message: messages.join("\n"),
    parsed: {
      ...rootEnvInfo?.dotenvResult?.parsed,
      ...schemaEnvInfo?.dotenvResult?.parsed
    }
  };
}
__name(tryLoadEnvs, "tryLoadEnvs");
function checkForConflicts(rootEnvInfo, envPath, type) {
  const parsedRootEnv = rootEnvInfo?.dotenvResult.parsed;
  const areNotTheSame = !pathsEqual(rootEnvInfo?.path, envPath);
  if (parsedRootEnv && envPath && areNotTheSame && fs.existsSync(envPath)) {
    const envConfig = dotenv.parse(fs.readFileSync(envPath));
    const conflicts = [];
    for (const k in envConfig) {
      if (parsedRootEnv[k] === envConfig[k]) {
        conflicts.push(k);
      }
    }
    if (conflicts.length > 0) {
      const relativeRootEnvPath = path.relative(process.cwd(), rootEnvInfo.path);
      const relativeEnvPath = path.relative(process.cwd(), envPath);
      if (type === "error") {
        const message = `There is a conflict between env var${conflicts.length > 1 ? "s" : ""} in ${chalk.underline(relativeRootEnvPath)} and ${chalk.underline(relativeEnvPath)}
Conflicting env vars:
${conflicts.map((conflict) => `  ${chalk.bold(conflict)}`).join("\n")}

We suggest to move the contents of ${chalk.underline(relativeEnvPath)} to ${chalk.underline(relativeRootEnvPath)} to consolidate your env vars.
`;
        throw new Error(message);
      } else if (type === "warn") {
        const message = `Conflict for env var${conflicts.length > 1 ? "s" : ""} ${conflicts.map((c) => chalk.bold(c)).join(", ")} in ${chalk.underline(relativeRootEnvPath)} and ${chalk.underline(relativeEnvPath)}
Env vars from ${chalk.underline(relativeEnvPath)} overwrite the ones from ${chalk.underline(relativeRootEnvPath)}
      `;
        console.warn(`${chalk.yellow("warn(prisma)")} ${message}`);
      }
    }
  }
}
__name(checkForConflicts, "checkForConflicts");
function loadEnv(envPath) {
  if (exists(envPath)) {
    debug(`Environment variables loaded from ${envPath}`);
    return {
      dotenvResult: dotenvExpand(dotenv.config({
        path: envPath,
        debug: process.env.DOTENV_CONFIG_DEBUG ? true : void 0
      })),
      message: chalk.dim(`Environment variables loaded from ${path.relative(process.cwd(), envPath)}`),
      path: envPath
    };
  } else {
    debug(`Environment variables not found at ${envPath}`);
  }
  return null;
}
__name(loadEnv, "loadEnv");
function pathsEqual(path1, path2) {
  return path1 && path2 && path.resolve(path1) === path.resolve(path2);
}
__name(pathsEqual, "pathsEqual");
function exists(p) {
  return Boolean(p && fs.existsSync(p));
}
__name(exists, "exists");
export {
  exists,
  loadEnv,
  pathsEqual,
  tryLoadEnvs
};
