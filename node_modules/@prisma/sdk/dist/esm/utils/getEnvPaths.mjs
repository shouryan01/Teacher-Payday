var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import Debug from "@prisma/debug";
import findUp from "find-up";
import path from "path";
import fs from "fs";
import { getSchemaPathFromPackageJsonSync } from "../cli/getSchema";
import { exists } from "./tryLoadEnvs";
const debug = Debug("prisma:loadEnv");
function getEnvPaths(schemaPath, opts = { cwd: process.cwd() }) {
  const rootEnvPath = getProjectRootEnvPath({ cwd: opts.cwd }) ?? null;
  const schemaEnvPathFromArgs = schemaPathToEnvPath(schemaPath);
  const schemaEnvPathFromPkgJson = schemaPathToEnvPath(readSchemaPathFromPkgJson());
  const schemaEnvPaths = [
    schemaEnvPathFromArgs,
    schemaEnvPathFromPkgJson,
    "./prisma/.env",
    "./.env"
  ];
  const schemaEnvPath = schemaEnvPaths.find(exists);
  return { rootEnvPath, schemaEnvPath };
}
__name(getEnvPaths, "getEnvPaths");
function readSchemaPathFromPkgJson() {
  try {
    return getSchemaPathFromPackageJsonSync(process.cwd());
  } catch {
    return null;
  }
}
__name(readSchemaPathFromPkgJson, "readSchemaPathFromPkgJson");
function getProjectRootEnvPath(opts) {
  const pkgJsonPath = findUp.sync((dir) => {
    const pkgPath = path.join(dir, "package.json");
    if (findUp.sync.exists(pkgPath)) {
      try {
        const pkg = JSON.parse(fs.readFileSync(pkgPath, "utf8"));
        if (pkg["name"] !== ".prisma/client") {
          debug(`project root found at ${pkgPath}`);
          return pkgPath;
        }
      } catch (e) {
        debug(`skipping package.json at ${pkgPath}`);
      }
    }
    return void 0;
  }, opts);
  if (!pkgJsonPath) {
    return null;
  }
  const candidate = path.join(path.dirname(pkgJsonPath), ".env");
  if (!fs.existsSync(candidate)) {
    return null;
  }
  return candidate;
}
__name(getProjectRootEnvPath, "getProjectRootEnvPath");
function schemaPathToEnvPath(schemaPath) {
  if (!schemaPath)
    return null;
  return path.join(path.dirname(schemaPath), ".env");
}
__name(schemaPathToEnvPath, "schemaPathToEnvPath");
export {
  getEnvPaths
};
