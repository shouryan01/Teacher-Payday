var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import execa from "execa";
import fs from "fs-jetpack";
import path from "path";
import tempy from "tempy";
const jestContext = {
  new: function(ctx = {}) {
    const c = ctx;
    beforeEach(() => {
      const originalCwd = process.cwd();
      c.tmpDir = tempy.directory();
      c.fs = fs.cwd(c.tmpDir);
      c.fixture = (name) => {
        c.fs.copy(path.join(originalCwd, "src", "__tests__", "fixtures", name), ".", {
          overwrite: true
        });
        c.fs.symlink(path.join(originalCwd, "..", "client"), path.join(c.fs.cwd(), "node_modules", "@prisma", "client"));
      };
      c.mocked = c.mocked ?? {
        cwd: process.cwd()
      };
      c.cli = (...input) => {
        return execa.node(path.join(originalCwd, "../cli/build/index.js"), input, {
          cwd: c.fs.cwd(),
          stdio: "pipe",
          all: true
        });
      };
      process.chdir(c.tmpDir);
    });
    afterEach(() => {
      process.chdir(c.mocked.cwd);
    });
    return factory(ctx);
  }
};
function factory(ctx) {
  return {
    add(contextContributor) {
      contextContributor(ctx);
      return factory(ctx);
    },
    assemble() {
      return ctx;
    }
  };
}
__name(factory, "factory");
const jestConsoleContext = /* @__PURE__ */ __name(() => (ctx) => {
  beforeEach(() => {
    ctx.mocked["console.error"] = jest.spyOn(console, "error").mockImplementation(() => {
    });
    ctx.mocked["console.log"] = jest.spyOn(console, "log").mockImplementation(() => {
    });
    ctx.mocked["console.info"] = jest.spyOn(console, "info").mockImplementation(() => {
    });
    ctx.mocked["console.warn"] = jest.spyOn(console, "warn").mockImplementation(() => {
    });
  });
  afterEach(() => {
    ctx.mocked["console.error"].mockRestore();
    ctx.mocked["console.log"].mockRestore();
    ctx.mocked["console.info"].mockRestore();
    ctx.mocked["console.warn"].mockRestore();
  });
  return null;
}, "jestConsoleContext");
export {
  jestConsoleContext,
  jestContext
};
