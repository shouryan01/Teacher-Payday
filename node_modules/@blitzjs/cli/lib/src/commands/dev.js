"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dev = void 0;
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
class Dev extends command_1.Command {
    run() {
        var _a;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const { flags } = this.parse(Dev);
            const config = {
                rootFolder: process.cwd(),
                port: flags.port,
                hostname: flags.hostname,
                inspect: flags.inspect,
                clean: flags["no-incremental-build"],
                env: "dev",
            };
            try {
                const dev = (yield Promise.resolve().then(() => (0, tslib_1.__importStar)(require("@blitzjs/server")))).dev;
                const { loadConfigProduction } = yield Promise.resolve().then(() => (0, tslib_1.__importStar)(require("next/dist/server/config-shared")));
                const blitzConfig = loadConfigProduction(config.rootFolder);
                if (((_a = blitzConfig.cli) === null || _a === void 0 ? void 0 : _a.clearConsoleOnBlitzDev) !== false &&
                    !process.env.BLITZ_TEST_ENVIRONMENT) {
                    const { log } = yield Promise.resolve().then(() => (0, tslib_1.__importStar)(require("next/dist/server/lib/logging")));
                    log.clearConsole();
                }
                yield dev(config);
            }
            catch (err) {
                console.error(err);
                process.exit(1); // clean up?
            }
        });
    }
}
exports.Dev = Dev;
Dev.description = "Start a development server";
Dev.aliases = ["d"];
Dev.flags = {
    help: command_1.flags.help({ char: "h" }),
    port: command_1.flags.integer({
        char: "p",
        description: "Set port number",
    }),
    hostname: command_1.flags.string({
        char: "H",
        description: "Set server hostname",
    }),
    inspect: command_1.flags.boolean({
        description: "Enable the Node.js inspector",
    }),
    "no-incremental-build": command_1.flags.boolean({
        description: "Disable incremental build and start from a fresh cache",
    }),
    env: command_1.flags.string({
        char: "e",
        description: "Set app environment name",
    }),
};
