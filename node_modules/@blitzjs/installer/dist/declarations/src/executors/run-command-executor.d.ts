import { RecipeCLIArgs } from '../types';
import { Executor, ExecutorConfig } from './executor';
export declare type CliCommand = string | [string, ...string[]];
export interface Config extends ExecutorConfig {
    command: CliCommand;
}
export interface CommitChildProps {
    commandInstalled: boolean;
    handleChangeCommitted: () => void;
    command: CliCommand;
    cliArgs: RecipeCLIArgs;
    step: Config;
}
export declare const type = "run-command";
/**
 * INFO: Exported for unit testing purposes
 *
 * This function calls the defined command with their optional arguments if defined
 *
 * @param {CliCommand} input  The Command and arguments
 * @return Promise<void>
 *
 * @example await executeCommand("ls")
 * @example await executeCommand(["ls"])
 * @example await executeCommand(["ls", ...["-a", "-l"]])
 */
export declare function executeCommand(input: CliCommand): Promise<void>;
export declare const Commit: Executor['Commit'];
